<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dean's blog</title>
    <description>Dean's blog is a blog about computer science and development</description>
    <link>https://www.thomasdurand.fr/</link>
    <atom:link href="https://www.thomasdurand.fr/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 19 Nov 2018 15:24:54 +0100</pubDate>
    <lastBuildDate>Mon, 19 Nov 2018 15:24:54 +0100</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>Build a privacy-safe home network using Pi-hole</title>
        <description>&lt;p&gt;Data privacy, and the usage of collected data have now became a controversial subject. People tends to aknowlegde more and more the importance of keeping private data ; and private life … well … private.&lt;/p&gt;

&lt;p&gt;In this tutorial, you’ll see what solution I came around keeping my own privacy at my home network.&lt;/p&gt;

&lt;h3 id=&quot;what-is-pi-hole&quot;&gt;What is Pi-hole?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://pi-hole.net/&quot;&gt;Pi-hole&lt;/a&gt;, as they describe themselves, is an open-source &lt;a href=&quot;https://en.wikipedia.org/wiki/DNS_sinkhole&quot;&gt;DNS sinkhole&lt;/a&gt;.
It is a custom DNS ; that will drop request during the DNS resolution step if it’s been blacklisted.&lt;/p&gt;

&lt;p&gt;The main advantage of dropping request at DNS resolution step is that the request never leave your own network: 
It is first sent to your Raspberry Pi, and then dropped immediately if it’s been blacklisted.&lt;/p&gt;

&lt;p&gt;It means that blacklisted remote servers never have to know that you even exist!
The ad are dropped before even loading, and not at rendering time, granting your network better performances.&lt;/p&gt;

&lt;p&gt;Of course, some ad-based blacklist are provided, making Pi-hole a powerful and &lt;strong&gt;untraceable&lt;/strong&gt; ad-blocker.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-your-raspberry-pi&quot;&gt;Setting up your Raspberry Pi&lt;/h3&gt;

&lt;p&gt;This step if &lt;strong&gt;optional&lt;/strong&gt;, but it’s always good to start with a &lt;em&gt;fresh install&lt;/em&gt;.
You can, of course, skip immediately to &lt;a href=&quot;#installing-pi-hole&quot;&gt;Pi-hole installation&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;raspbian-stretch-installation&quot;&gt;Raspbian Stretch installation&lt;/h4&gt;

&lt;p&gt;Download the &lt;a href=&quot;https://downloads.raspberrypi.org/raspbian_lite_latest&quot;&gt;latest release of Raspbian Stretch&lt;/a&gt; on your disk.
Then, we need to copy it on your SD card, properly.&lt;/p&gt;

&lt;p&gt;On macOS, It can be done with the following commands.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;diskutil list &lt;span class=&quot;c&quot;&gt;# Note the number associated with your SD card. (ie disk2 for instance)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;diskutil unmountDisk /dev/disk2
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo dd &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1m &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;raspbian-stretch-lite.img &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/rdisk2 &lt;span class=&quot;nv&quot;&gt;conv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sync&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We then need to enable SSH before plugging the SD card in the Raspberry for the first boot:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /Volumes/boot/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;ssh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And we unmount the disk&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;diskutil unmountDisk /dev/disk2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, you can plug your SD card in your Raspberry and wait it to boot.&lt;/p&gt;

&lt;p&gt;You may now connect to it using SSH:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh pi@192.168.1.x&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Default password is &lt;code class=&quot;highlighter-rouge&quot;&gt;raspberry&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;minimal-security-settings&quot;&gt;Minimal security settings&lt;/h4&gt;

&lt;p&gt;The bare minimum to do when the Raspberry first start is to &lt;strong&gt;change the password for the pi user&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;passwd&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may also want to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;create your own user with sudo auth, and then delete the pi user&lt;/li&gt;
  &lt;li&gt;change the SSH port&lt;/li&gt;
  &lt;li&gt;Authenticate using a private key&lt;/li&gt;
  &lt;li&gt;Requiring a password when using &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Update the repositories and packages&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;installing-pi-hole&quot;&gt;Installing Pi-hole&lt;/h3&gt;

&lt;p&gt;It is advised that your Raspberry Pi should have a static IP on your network.&lt;/p&gt;

&lt;p&gt;From your Raspberry, you can run the installer by executing:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; basic-install.sh https://install.pi-hole.net
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash basic-install.sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The installation should guide you through the process. When prompted to validate the IP as a static IP, say yes ; 
and always make sure that the IP is effectively static in order to work.&lt;/p&gt;

&lt;p&gt;At the end of the installation process, the administration password will be prompted to you if you choose to install the web administration interface, along with lighttp.&lt;/p&gt;

&lt;p&gt;It’s, of course, recommended to change it using &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo pihole -a -p&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You then need to set up the static IP of your Raspberry as your primary DNS server on your router.
If you can’t, it’s still possible to use the Raspberry as your main DHCP server. (Disable your old one if you choose this option).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/screenshots/setting-dns.png&quot; alt=&quot;How to set primary DNS with DHCP&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You may now use the internet with no ads or trackers!&lt;/p&gt;

&lt;h3 id=&quot;customize-your-network-with-aliases&quot;&gt;Customize your network with aliases&lt;/h3&gt;

&lt;p&gt;You can, if you want, create aliases to communicate more easily with your devices associated with a static IP.&lt;/p&gt;

&lt;p&gt;For instance, using &lt;code class=&quot;highlighter-rouge&quot;&gt;box.lan&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;pi.lan&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.1.x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To do so, you need to create an alias file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nano /etc/pihole/lan.conf&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Containing, for instance:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;192.168.1.1 box.lan
192.168.1.2 router.lan
192.168.1.3 pi.lan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, add this configuration file to dnsmasq, and reload it&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;addn-hosts=/etc/pihole/lan.list&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; /etc/dnsmasq.d/02-lan.conf
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pihole restartdns&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;using-the-web-admin-to-check-your-traffic&quot;&gt;Using the web admin to check your traffic&lt;/h3&gt;

&lt;p&gt;Once Pi-hole is enabled, you can access &lt;a href=&quot;http://pi.hole/&quot;&gt;http://pi.hole&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/screenshots/pi-hole-home.png&quot; alt=&quot;The home page of Pi Hole Admin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To have access to a lot of more informations, you may login with the password you have setted during installation.&lt;/p&gt;

&lt;p&gt;If you forgot your password already, you can reset it easily using &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo pihole -a -p&lt;/code&gt; (I know, I repeat myself!)&lt;/p&gt;

&lt;p&gt;You’ll see the top blocked domains, and the most recents requests.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/screenshots/pi-hole-blocked.png&quot; alt=&quot;The home page of Pi Hole Admin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you don’t want to track your network that much, you may want to change &lt;a href=&quot;http://pi.hole/admin/settings.php?tab=privacy&quot;&gt;privacy level mode in the settings&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By regulary check the requests that have been blocked, and the one that are allowed, you’ll be able to whitelist some request you don’t mind see go threw, and blacklist the one that looks shady.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fun fact:&lt;/strong&gt; When I connected the Android phone of my girlfriend, this is what happened:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/screenshots/pi-hole-android.png&quot; alt=&quot;The home page of Pi Hole Admin&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;bonus-redirecting-a-dns-resolution&quot;&gt;Bonus: redirecting a DNS resolution&lt;/h3&gt;

&lt;p&gt;As described in my article &lt;a href=&quot;/security/iot/2018/01/31/how-anyone-could-feed-my-cat.html&quot;&gt;How everyone could feed my cat&lt;/a&gt;, 
I needed to redirect the resolution of my feeder to prevent it to communicate with the original server.&lt;/p&gt;

&lt;p&gt;I have built a &lt;a href=&quot;https://github.com/Dean151/Aln-NodeJs&quot;&gt;custom API&lt;/a&gt;, that is hosted on my server. And to make it work, I have to redirect my feeder requests to my server.&lt;/p&gt;

&lt;p&gt;It’s doable, simply by editing the &lt;code class=&quot;highlighter-rouge&quot;&gt;etc/hosts&lt;/code&gt; file :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[...]
51.38.185.236 dev.alnpet.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, by restarting the DNS with &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo pihole restartdns&lt;/code&gt; ; the feeder communicate with my server, and not with theirs.&lt;/p&gt;

&lt;h3 id=&quot;going-way-further&quot;&gt;Going way further&lt;/h3&gt;

&lt;p&gt;You now have a fully functional ad &amp;amp; tracker blocker from the network side.&lt;/p&gt;

&lt;p&gt;If you’re really concerned about privacy, you should look forward of installing your &lt;a href=&quot;https://docs.pi-hole.net/guides/unbound/&quot;&gt;own DNS resolver using unbound&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Otherwise, for more security, you should &lt;a href=&quot;https://docs.pi-hole.net/guides/dns-over-https/&quot;&gt;configure DNS over HTTPS&lt;/a&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;cloudflared&lt;/code&gt;, 
securing the DNS resolving using a TLS connexion, and preventing snooping, monitoring or other types of attacks.&lt;/p&gt;

&lt;p&gt;Finally, if you want to make your pi-hole admin interface available from the outside world, you really should consider &lt;a href=&quot;https://discourse.pi-hole.net/t/enabling-https-for-your-pi-hole-web-interface/5771&quot;&gt;an HTTPS configuration&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sat, 20 Oct 2018 17:00:00 +0200</pubDate>
        <link>https://www.thomasdurand.fr/security/network/2018/10/20/privacy-at-home-with-pi-hole.html</link>
        <guid isPermaLink="true">https://www.thomasdurand.fr/security/network/2018/10/20/privacy-at-home-with-pi-hole.html</guid>
        
        
        <category>Security</category>
        
        <category>network</category>
        
      </item>
    
      <item>
        <title>How anyone could feed my cat</title>
        <description>&lt;p&gt;As a software engineer for &lt;a href=&quot;https://www.dilitrust.com/en/&quot;&gt;DiliTrust&lt;/a&gt;, I think software security as a primary feature for any kind of product or software.
Every time we heard a story about any kind of security flaw, we take it seriously: how is that possible? Am we directly or indirectly impacted?&lt;/p&gt;

&lt;p&gt;Well, I guess I wasn’t yet prepared for my last discovery.&lt;/p&gt;

&lt;h3 id=&quot;what-i-like-about-home-automation-solution&quot;&gt;What I like about home automation solution&lt;/h3&gt;

&lt;p&gt;Since I got my first home automation device: a Philips Hue set, I really like the idea of handling devices remotely, or locally from my phone or even my voice. That’s why I also bought some sensor devices from Elgato, to track temperature, humidity and air quality all around my flat.&lt;/p&gt;

&lt;p&gt;Every device I ever choose was HomeKit compatible, and I never intended to use any of my devices remotely. I do not have any concentrator to make HomeKit available from anywhere, and I feel confident that my devices are pretty much secure. I suppose, maybe wrongly, that Apple do impose some rules to make the device secure, and also make sure that their own implementation of HomeKit is quite secure.&lt;/p&gt;

&lt;p&gt;I know that HomeKit already had some security flaw &lt;a href=&quot;https://9to5mac.com/2017/12/07/homekit-vulnerability/&quot;&gt;in the past&lt;/a&gt;, and may have some in the future, but I’m pretty sure Apple will always correct them.&lt;/p&gt;

&lt;h3 id=&quot;where-my-cat-comes-in&quot;&gt;Where my cat comes in&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pictures/newton.jpg&quot; alt=&quot;My cat, Newton&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I adopted Newton in June 2016, and he’s adorable… well… most of the time. But since we’ve got him neutralized, he became trapped in gluttony. Incapable of getting himself regulated with food, we had a pretty bad time trying him not to eat more food that he needs.&lt;/p&gt;

&lt;p&gt;In that context, I got seduced by an automatic feeder like we can find on Amazon.
The trademark &lt;em&gt;HoneyGuaridan&lt;/em&gt; was getting very good reception and comments from many users, and their last model, the &lt;strong&gt;HoneyGuaridan S25&lt;/strong&gt; was very seducing!&lt;/p&gt;

&lt;p&gt;Indeed, it was one of the only models that allowed me to program 10 meals or more a day! Perfect to make my cat more regulated about food. Last tinkle in my ear: The device was getting setted and triggered with a smartphone, it was a complete IoT device!&lt;/p&gt;

&lt;h3 id=&quot;when-it-got-complicated&quot;&gt;When it got complicated&lt;/h3&gt;

&lt;p&gt;I received the device about three weeks ago, and my cat adopted it very quickly!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pictures/honeyguaridan.jpg&quot; alt=&quot;My cat, and his feeding machine&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Despite a buggy application, the machine works very well, and my cat gets less obsessed about food.&lt;/p&gt;

&lt;p&gt;Plus, the setup workflow made me fairly confident: I had to create an account, and then it seemed like we’re authenticated all the time within the app.&lt;/p&gt;

&lt;p&gt;But still, with some very nasty bugs, the app gave a very bad user experience, and I decided to reverse-engineer their API to make my own application, with less features, but also less UI bugs!&lt;/p&gt;

&lt;p&gt;I used &lt;a href=&quot;https://portswigger.net/burp&quot;&gt;Burp Community Edition&lt;/a&gt; as an HTTP proxy to catch every requests sent by the application ; and find out how they’re built.&lt;/p&gt;

&lt;h3 id=&quot;what-i-found&quot;&gt;What I found&lt;/h3&gt;

&lt;p&gt;The application communicate with many differents servers: &lt;code class=&quot;highlighter-rouge&quot;&gt;us1.dev.alnpet.com&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;fr.dev.alnpet.com&lt;/code&gt;, but also &lt;code class=&quot;highlighter-rouge&quot;&gt;183.232.29.249&lt;/code&gt; to send some report data over a security layer.&lt;/p&gt;

&lt;p&gt;Both &lt;code class=&quot;highlighter-rouge&quot;&gt;fr.dev.alnpet.com&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;us1.dev.alnpet.com&lt;/code&gt; does not have any security layer, and make data transmit without TLS or SSL. It means that it’s vulnerable to &lt;a href=&quot;https://en.wikipedia.org/wiki/Man-in-the-middle_attack&quot;&gt;man-in-the-middle attacks&lt;/a&gt;, and that the password used for signin and login is sent with no encryption at all, making any attacker able to intercept it, and read it!&lt;/p&gt;

&lt;p&gt;But another intercepted request I got tinkled my mind: I was not able to see any authentication cookie, representing my current session, and declaring the permission to perform a feed request, or any modification on my device schedule.&lt;/p&gt;

&lt;p&gt;I immediately tried it with &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;: Just using my machine unique ID and the url, BIM, my cat got a new meal, right from my command line interface, and without any session created.&lt;/p&gt;

&lt;p&gt;This is crazy. At this moment, I realize that barely &lt;em&gt;anyone&lt;/em&gt; could empty my feeder from anywhere in the world and/or make my cat obese!&lt;/p&gt;

&lt;h3 id=&quot;how-i-reacted&quot;&gt;How I reacted&lt;/h3&gt;

&lt;p&gt;My first reaction to that discovery was to remove the Wi-Fi settings from the machine, making sure it’s not anymore Internet connected. Of course I tried the magic request to prove that my machine was offline, and therefore more secure.&lt;/p&gt;

&lt;p&gt;But that solution made the machine unusable: impossible to change the schedule or trigger a meal from my phone anymore. So I decided to continue the reverse engineering of my machine in order to implement my own secure API to use it! (crazy right?)&lt;/p&gt;

&lt;p&gt;I looked for my &lt;a href=&quot;https://www.raspberrypi.org/&quot;&gt;Raspberry Pi&lt;/a&gt;, that was getting some dust in a drawer, and setted up a &lt;a href=&quot;https://www.raspberrypi.org/documentation/configuration/wireless/access-point.md&quot;&gt;Wi-Fi hotspot&lt;/a&gt; with it.&lt;/p&gt;

&lt;p&gt;That allowed me to look the way my cat feeder was communicating with the outside world.
I found out that the only address it was communicating with was &lt;code class=&quot;highlighter-rouge&quot;&gt;47.90.203.137&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;47.90.203.137&lt;/code&gt; corresponds to &lt;a href=&quot;http://alnpet.com&quot;&gt;alnpet.net&lt;/a&gt;. I do recognize the feeder on this website, but It’s a more advanced one, with a camera, and more advanced feature. Hum, weird. And the preorder link bring to KickStarter homepage. Oh boy, what am I getting myself into? I do not know what link there is between &lt;em&gt;HoneyGuaridan&lt;/em&gt; and &lt;em&gt;Alnpet&lt;/em&gt;. Are they even the same?&lt;/p&gt;

&lt;p&gt;Well, let say that this IP has been banned from my Raspberry Pi&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iptables -A INPUT -s 47.90.203.137 -j DROP
iptables -A FORWARD -s 47.90.203.137 -j DROP
iptables -A OUTPUT -s 47.90.203.137 -j DROP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That make sure my machine is still offline, while connected to my Raspberry. The next step would be to imitate this server to make my machine thinks it’s communicating with Alnpet API, despite it would be mine.&lt;/p&gt;

&lt;p&gt;For now, I’m still at the reverse engineering phase in order to understand how I can communicate with my device. It’s not the easiest part; let hope I succeed.&lt;/p&gt;

&lt;p&gt;And lesson learned: I will always challenge any new device that connect to my network from now on.&lt;/p&gt;

&lt;p&gt;Am I getting a little bit paranoid? Yes I am!&lt;/p&gt;

</description>
        <pubDate>Wed, 31 Jan 2018 12:00:00 +0100</pubDate>
        <link>https://www.thomasdurand.fr/security/iot/2018/01/31/how-anyone-could-feed-my-cat.html</link>
        <guid isPermaLink="true">https://www.thomasdurand.fr/security/iot/2018/01/31/how-anyone-could-feed-my-cat.html</guid>
        
        
        <category>Security</category>
        
        <category>IOT</category>
        
      </item>
    
      <item>
        <title>Comment n'importe qui pouvait nourrir mon chat</title>
        <description>&lt;p&gt;En tant qu’ingénieur logiciel chez &lt;a href=&quot;https://www.dilitrust.com/&quot;&gt;DiliTrust&lt;/a&gt;, la sécurité du logiciel est la première fonctionnalité que je conçois pour n’importe quel produit ou logiciel.
À chaque fois que nous entendons parler d’une nouvelle faille, nous prenons ça très au sérieux : Comment est-ce possible ? Est-on directement ou indirectement impactés ?&lt;/p&gt;

&lt;p&gt;Je crois que je n’étais pas encore prêt pour ce que j’allais découvrir.&lt;/p&gt;

&lt;h3 id=&quot;ce-que-jaime-dans-la-domotique&quot;&gt;Ce que j’aime dans la domotique&lt;/h3&gt;

&lt;p&gt;Depuis que j’ai eu mes premiers appareils de domotique : un pack Philips Hue, j’aime beaucoup l’idée de contrôler des choses à distance, ou à proximité depuis mon téléphone, et même avec ma voix. C’est pourquoi j’ai également acheté des capteurs Elgato, pour connaitre la température, l’humidité et la qualité de l’air dans tout mon appartement.&lt;/p&gt;

&lt;p&gt;Chaque appareil que j’ai choisi était compatible HomeKit, et je n’ai jamais cherché à utiliser mes appareils depuis l’extérieur. Je ne dispose d’ailleurs pas de concentrateur pour rendre HomeKit disponible depuis n’importe où, et je suis à peu près sûr de moi que mon installation est un minimum sécurisée. Je suppose également, peut-être à tort, qu’Apple impose certaines règles pour imposer un niveau de sécurité minimal. Je suppose aussi que leur implémentation de HomeKit est correcte et sécurisée.&lt;/p&gt;

&lt;p&gt;Je sais que HomeKit a déjà fait l’affaire de failles &lt;a href=&quot;https://9to5mac.com/2017/12/07/homekit-vulnerability/&quot;&gt;dans le passé&lt;/a&gt;, et qu’il y en aura d’autre dans le futur, mais je suis certain qu’Apple réagira toujours afin de les combler au plus vite.&lt;/p&gt;

&lt;h3 id=&quot;quand-mon-chat-fait-son-entrée&quot;&gt;Quand mon chat fait son entrée&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pictures/newton.jpg&quot; alt=&quot;Mon chat, Newton&quot; /&gt;&lt;/p&gt;

&lt;p&gt;J’ai adopté Newton en juin 2016, et c’est un amour … la plupart du temps. Cependant, depuis que nous l’avons stérilisé, il est devenu complètement glouton, incapable de se réguler avec la nourriture. Nous avons passé un très mauvais moment à essayer de l’empêcher de se nourrir plus que ses réels besoins.&lt;/p&gt;

&lt;p&gt;C’est dans ce contexte que je me suis laissé séduire par l’idée d’acheter un distributeur automatique de croquette comme on en trouve beaucoup sur Amazon.
La marque &lt;em&gt;HoneyGuaridan&lt;/em&gt; était bien notée sur les différents sites, et par les utilisateurs, et leur dernier modèle, le &lt;strong&gt;HoneyGuaridan S25&lt;/strong&gt; était très intéressant !&lt;/p&gt;

&lt;p&gt;En effet, c’est l’un des rares permettant de programmer au moins 10 repas sur la même journée ! Parfait pour réguler un peu plus mon chat. Cerise sur le gâteau : l’appareil se paramètre et se déclenche depuis un Smartphone : un véritable engin domotique !&lt;/p&gt;

&lt;h3 id=&quot;le-moment-où-tout-se-complexifie&quot;&gt;Le moment où tout se complexifie&lt;/h3&gt;

&lt;p&gt;J’ai reçu l’appareil il y a environ 3 semaines, et mon chat l’a adopté vraiment rapidement !&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pictures/honeyguaridan.jpg&quot; alt=&quot;Mon chat, attendant des croquettes de sa machine&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En dépit d’une application un peu buggée, la machine fonctionne parfaitement, et mon chat se désobsède petit à petit de la nourriture.&lt;/p&gt;

&lt;p&gt;De plus, la démarche de mise en place me donnait confiance : j’ai du créer un compte, et il semblait que l’application était constamment connectée à ce compte.&lt;/p&gt;

&lt;p&gt;Mais les bugs UI fréquents de l’applications m’embêtaient régulièrement, rendant l’expérience utilisateur assez médiocre. J’ai donc décidé de faire du reverse-engineering pour créer ma propre application, avec certes moins de fonctionnalités, mais aussi moins de bugs !&lt;/p&gt;

&lt;p&gt;J’ai donc utilisé &lt;a href=&quot;https://portswigger.net/burp&quot;&gt;Burp Community Edition&lt;/a&gt; comme proxy HTTP pour intercepter les requêtes envoyées par l’application ; et comprendre comment elles sont constituées.&lt;/p&gt;

&lt;h3 id=&quot;ce-que-jai-découvert&quot;&gt;Ce que j’ai découvert&lt;/h3&gt;

&lt;p&gt;L’application communique avec trois serveurs différents : &lt;code class=&quot;highlighter-rouge&quot;&gt;us1.dev.alnpet.com&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;fr.dev.alnpet.com&lt;/code&gt;, et aussi &lt;code class=&quot;highlighter-rouge&quot;&gt;183.232.29.249&lt;/code&gt; pour envoyer des données de journalisation avec une couche de sécurité TLS ou SSL.&lt;/p&gt;

&lt;p&gt;Mais ni &lt;code class=&quot;highlighter-rouge&quot;&gt;fr.dev.alnpet.com&lt;/code&gt;, ni &lt;code class=&quot;highlighter-rouge&quot;&gt;us1.dev.alnpet.com&lt;/code&gt; ne se protègent derrière TLS ou SSL pour chiffrer les données transmises. Cela implique une vulnérabilité aux &lt;a href=&quot;https://fr.wikipedia.org/wiki/Attaque_de_l%27homme_du_milieu&quot;&gt;attaques type man-in-the-middle&lt;/a&gt;, et que donc le mot de passe enregistré dans l’application était transmis en clair, permettant à n’importe quel interceptant de le récupérer !&lt;/p&gt;

&lt;p&gt;Mais en interceptant d’autres requêtes, quelque chose me titillait : je ne trouvais aucun cookie d’authentification, représentant ma session actuelle, et autorisant mes permissions à déclencher ma machine, ou à modifier sa configuration.&lt;/p&gt;

&lt;p&gt;J’ai donc immédiatement essayé une commande &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;: et juste en disposant de l’identifiant unique de ma machine, mon chat a reçu un nouveau repas, directement depuis mon invité de commande, et sans aucune session.&lt;/p&gt;

&lt;p&gt;C’est complètement fou. Et c’est à cet instant que je me suis rendu compte que &lt;em&gt;n’importe qui&lt;/em&gt; qui s’en donnerait la peine, pouvait vider mon distributeur depuis n’importe où, et éventuellement faire en sorte de rendre mon chat complètement obèse.&lt;/p&gt;

&lt;h3 id=&quot;comment-réagir-&quot;&gt;Comment réagir ?&lt;/h3&gt;

&lt;p&gt;Mon premier réflexe aura été de retirer la configuration Wi-Fi du distributeur, pour être sûr qu’elle n’accède plus à Internet sans mon autorisation. Bien évidemment, j’ai immédiatement réessayé la “requête magique” pour prouver que ma machine était bien hors-ligne, et par conséquent, plus sécurisée.&lt;/p&gt;

&lt;p&gt;Par contre, cette solution rendait la machine quasiment inutilisable. Bien qu’elle continue à suivre son planning, je ne pouvais plus changer ce dernier, ou bien déclencher un repas depuis mon téléphone. C’est pourquoi j’ai décider d’aller plus loin dans mon reverse-engineering, pour créer ma propre API, plus sécurisée, pour communiquer avec elle ! (Projet un peu fou, je l’accorde)&lt;/p&gt;

&lt;p&gt;J’ai donc cherché mon &lt;a href=&quot;https://www.raspberrypi.org/&quot;&gt;Raspberry Pi&lt;/a&gt;, qui prenait la poussière dans un tiroir, et paramétré un &lt;a href=&quot;https://www.raspberrypi.org/documentation/configuration/wireless/access-point.md&quot;&gt;hotspot Wi-Fi&lt;/a&gt; avec.&lt;/p&gt;

&lt;p&gt;Cela m’a permis d’analyser la façon dont le distributeur communiquait avec le monde.
Il se trouve qu’elle ne communique à priori qu’avec une seule adresse IP : &lt;code class=&quot;highlighter-rouge&quot;&gt;47.90.203.137&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;47.90.203.137&lt;/code&gt; correspond à &lt;a href=&quot;http://alnpet.com&quot;&gt;alnpet.net&lt;/a&gt;. Je reconnais bien le distributeur sur ce site, mais dans une version plus avancée, avec une caméra, et d’autres fonctionnalités. Hum, étrange. De plus, le lien de pré-commande amène sur la page d’accueil de KickStarter. Oula, dans quoi je m’embarque ? Je ne sais pas quel lien il y a entre &lt;em&gt;HoneyGuaridan&lt;/em&gt; et &lt;em&gt;Alnpet&lt;/em&gt;. Sont-ils une seule et même entité ?&lt;/p&gt;

&lt;p&gt;Autant vous dire que cette adresse IP a été bannie de mon Raspberry Pi :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iptables -A INPUT -s 47.90.203.137 -j DROP
iptables -A FORWARD -s 47.90.203.137 -j DROP
iptables -A OUTPUT -s 47.90.203.137 -j DROP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cela assure que le distributeur reste hors ligne, alors qu’il est bien connecté au Wi-Fi créé par mon Raspberry.
L’étape suivante sera d’imiter le serveur d’alnpet, pour faire croire au distributeur qu’il communique avec, alors que ce sera ma propre API.&lt;/p&gt;

&lt;p&gt;Pour l’instant j’en suis encore à comprendre comment l’appareil communique avec les serveurs d’alnpet. C’est loin d’être la partie la plus facile, espérons que je réussisse.&lt;/p&gt;

&lt;p&gt;Ah, et leçon retenue : je prendrai toujours le temps de vérifier la sécurité de tout appareil que je connecterai à mon réseau personnel, dorénavant.&lt;/p&gt;

&lt;p&gt;Suis-je en train de devenir paranoïaque ? Oh, je l’ai toujours été !&lt;/p&gt;

</description>
        <pubDate>Wed, 31 Jan 2018 12:00:00 +0100</pubDate>
        <link>https://www.thomasdurand.fr/s%C3%A9curit%C3%A9/objet-connect%C3%A9/2018/01/31/comment-quiconque-pouvait-nourrir-mon-chat.html</link>
        <guid isPermaLink="true">https://www.thomasdurand.fr/s%C3%A9curit%C3%A9/objet-connect%C3%A9/2018/01/31/comment-quiconque-pouvait-nourrir-mon-chat.html</guid>
        
        
        <category>Sécurité</category>
        
        <category>Objet-connecté</category>
        
      </item>
    
      <item>
        <title>Cinq erreurs classiques avec le chiffrement AES</title>
        <description>&lt;p&gt;&lt;strong&gt;Écrit pour Swift 3 avec Xcode 8.1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Avec des librairies comme &lt;a href=&quot;https://github.com/krzyzanowskim/CryptoSwift&quot;&gt;CryptoSwift&lt;/a&gt;, il est devenu de plus en plus
aisé d’utiliser le chiffrement dans votre code. Cependant, il y a de nombreux pièges
dans lesquels il ne faut pas tomber lorsqu’on utilise la cryptographie !&lt;/p&gt;

&lt;p&gt;La suite de cet article utilisera CryptoSwift pour ses exemples.&lt;/p&gt;

&lt;h3 id=&quot;1-ne-pas-hard-coder-les-clés-dans-le-code&quot;&gt;1. Ne pas “Hard Coder” les clés dans le code&lt;/h3&gt;

&lt;p&gt;Tout ce que vous placez dans le code est, d’une façon ou d’une autre, lisible par n’importe qui.
C’est toujours possible pour un attaquant de retrouver quelque chose, même caché dans le code
compilé de votre application.&lt;/p&gt;

&lt;p&gt;De plus, “hard coder” une clé signifie que la clé est la même pour tous les utilisateurs,
ce qui permettrait à un attaquant de déchiffrer les données de n’importe qui après avoir
analysé le code de l’application.&lt;/p&gt;

&lt;p&gt;Le dernier point, c’est l’importance de l’aléatoire dans une clé :
Une clé doit être entropique, elle doit pouvoir être n’importe quoi.
Le prochain octet doit pouvoir correspondre à n’importe quoi, ce qui n’est pas
vraiment le cas d’une chaîne de caractère UTF8, par exemple.&lt;/p&gt;

&lt;p&gt;La solution ?&lt;br /&gt;
Il faut &lt;strong&gt;générer&lt;/strong&gt; une clé lorsque vous en avez besoin d’une nouvelle, et la stocker dans un endroit sécurisé.&lt;/p&gt;

&lt;p&gt;On peut générer une clé pour  :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateRandomData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withUnsafeMutableBytes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;mutableBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UnsafeMutablePointer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UInt8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int32&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;SecRandomCopyBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kSecRandomDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutableBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errSecSuccess&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unableToGenerateData&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// La taille de la clé pour l'AES 256 est 256 ÷ 8 = 32&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;myAES256keyData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateRandomData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Stockez la clé dans un endroit sûr&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;2-stockez-vos-clés-dans-le-keychain&quot;&gt;2. Stockez vos clés dans le Keychain&lt;/h3&gt;

&lt;p&gt;Autant mettre les choses aux clair tout de suite, il n’y a &lt;strong&gt;pas de meilleur endroit&lt;/strong&gt; pour stocker
une donnée sensible comme une clé ou un mot de passe que le &lt;a href=&quot;https://developer.apple.com/documentation/security/keychain_services&quot;&gt;Keychain&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Il s’agit d’un logiciel d’Apple designé pour stocker de façon très sécurisée
les mots de passe, certificats, et clés de chiffrement.
Le Keychain est maintenu par Apple avec des mises à jour régulières des logiciels,
et finalement, il tire parti des composants matériels comme &lt;a href=&quot;https://www.quora.com/What-is-Apple’s-new-Secure-Enclave-and-why-is-it-important&quot;&gt;l’enclave sécurisée&lt;/a&gt; 
pour assurer les meilleurs niveaux de sécurité.&lt;/p&gt;

&lt;p&gt;TL;DR: Utilisez le Keychain, C’est l’alternative la plus sécurisée que vous avez !&lt;/p&gt;

&lt;p&gt;Il est très aisé de stocker et d’accéder au Keychain lorsqu’on utilise un wrapper comme &lt;a href=&quot;https://github.com/evgenyneu/keychain-swift&quot;&gt;Keychain-Swift&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;KeychainSwift&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keychain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;KeychainSwift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Stockons la clé créée précédemment&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;keychain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;my key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;withAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessibleWhenUnlockedThisDeviceOnly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Récupérons la clé quand on en a besoin&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keychain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;3-paramétrer-correctement-laccès-au-keychain&quot;&gt;3. Paramétrer correctement l’accès au Keychain&lt;/h3&gt;

&lt;p&gt;Vous n’avez peut-être pas encore remarqué, mais j’ai utilisé un paramètre d’accès dans
le setter dans le point précédent.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;accessibleWhenUnlockedThisDeviceOnly&lt;/code&gt; (&lt;a href=&quot;https://developer.apple.com/documentation/security/ksecattraccessiblewhenunlockedthisdeviceonly&quot;&gt;ref&lt;/a&gt;) est le minimum acceptable que 
j’utilise dans mon exemple précédent.&lt;br /&gt;
Il vaut mieux utiliser &lt;code class=&quot;highlighter-rouge&quot;&gt;accessibleWhenPasscodeSetThisDeviceOnly&lt;/code&gt; 
(&lt;a href=&quot;https://developer.apple.com/documentation/security/ksecattraccessiblewhenpasscodesetthisdeviceonly&quot;&gt;ref&lt;/a&gt;) lorsqu’il est disponible.&lt;/p&gt;

&lt;p&gt;That is needed to provide a correct level of security for your stored key.
It make sure the device is unlocked, prevent backups and keychain sharing between
devices, and it can also make sure the device is secured by an unlock code.&lt;/p&gt;

&lt;h3 id=&quot;4-utilisez-un-vecteur-dinitialisation&quot;&gt;4. Utilisez un vecteur d’initialisation&lt;/h3&gt;

&lt;p&gt;Chiffrer les données est de bonne pratique pour éviter quiconque de lire les données sensibles.&lt;/p&gt;

&lt;p&gt;Mais que ce passe-t-il si un attaquant peut lire les données sans posséder la clé,
simplement en analysant les données chiffrées ?&lt;/p&gt;

&lt;p&gt;C’est ce qui rend le vecteur d’initialisation si important !&lt;/p&gt;

&lt;p&gt;Prenons un exemple où nous avons besoin de chiffrer un booléen, car on ne souhaite 
pas qu’un attaquant puisse avoir qui possède une fonctionnalité ou non.&lt;/p&gt;

&lt;p&gt;Consultons les données après le chiffrement :&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;valeur&lt;/th&gt;
      &lt;th&gt;pas d’IV (ou partagé)&lt;/th&gt;
      &lt;th&gt;IV aléatoire&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HspSmVFeseu7kpt5ZJE13A==&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;6sM2RzgShVcu1OPM8sH0mw==&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HspSmVFeseu7kpt5ZJE13A==&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ylJjMWFq4MoqKvpn5WSYOQ==&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sdkaq/5TFZKjFjx35Cl0rw==&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JZHeEoBfgQgk8/8eOQlQxQ==&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sdkaq/5TFZKjFjx35Cl0rw==&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;byfgDi+CD7pAo2NXYk8tVw==&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HspSmVFeseu7kpt5ZJE13A==&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;XxWfqQXe3EwNuJ3AzvgOig==&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Une idée de ce qui ne va pas ?
Toutes les données identiques, chiffrées avec la même clé et le même vecteur d’initialisation
auront le même résultat.&lt;/p&gt;

&lt;p&gt;La conséquence est très mauvaise pour vos données, car l’attaquant pourrait éventuellement
accéder aux données chiffrées (et croyez moi, ça n’a rien de sorcier sur une application iOS),
puis réaliser des analyses sur les donénes pour en déduire la valeur initiale.&lt;/p&gt;

&lt;p&gt;Pour éviter cela, il est primordial de générer un vecteur d’initialisation unique et aléatoire
à chaque opération de chiffrement que vous pourriez réaliser.&lt;/p&gt;

&lt;p&gt;Bien évidemment, ce vecteur est indispensable pour le déchiffrement de la donnée, au même
titre que la clé.
Un endroit opportunt pour stocker le vecteur d’initialisation, c’est avec la donnée chiffrée, 
exactement comme on le ferait pour le &lt;a href=&quot;https://fr.wikipedia.org/wiki/Salage_(cryptographie)&quot;&gt;sel d’un hashage de mot de passe&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// On génère un vecteur d'initialisation à usage unique :&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;iv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;randomIV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blockSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// On chiffre les données :&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;crypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Puis on stocke les données chiffrées avec son vecteur associé&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myStorage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;securedData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crypted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;5-nutilisez-pas-le-mode-de-traitement-de-bloc-ecb&quot;&gt;5. N’utilisez pas le mode de traitement de bloc ECB&lt;/h3&gt;

&lt;p&gt;Le mode de traitement de bloc que vous choisissez dans votre algorithme de chiffrement
correspond à la méthode utilisée par l’algorithme pour effectuer le chiffrement&lt;/p&gt;

&lt;p&gt;Le choix d’un bon mode de traitement est donc essentiel pour rendre votre chiffrement utile et sécurisé.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Quelques méthodes disponibles&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;encryptedWithCBC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blockMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CBC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PKCS7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;encryptedWithCTR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blockMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PKCS7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Et celle que vous ne devriez jamais utiliser...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;encryptedWithECB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blockMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ECB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PKCS7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Mais pourquoi l’ECB est-il un mauvais choix ?&lt;/p&gt;

&lt;p&gt;ECB (Electronic Code Book) chiffre chaque bloc de données de votre entrée de façon séparée.
Le danger se situe dans le fait que cette méthode chiffrera de la même manière tout bloc similaire,
et tout comme le manque de vecteur d’initialisation, cela rend le chiffrement prévisible.&lt;/p&gt;

&lt;p&gt;Cela peut aussi causer des attaques par répétition, et à la fuite d’informations.&lt;/p&gt;

&lt;p&gt;Pour vous prouver que l’ECB n’est pas une méthode chiffrement sécurisée, rien ne
vaut cet exemple de &lt;a href=&quot;https://fr.wikipedia.org/wiki/Mode_d%27opération_(cryptographie)&quot;&gt;Wikipedia&lt;/a&gt; utilisant une image comme données à chiffrer :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ios/crypto-practices/ECB-fr.png&quot; alt=&quot;Illustration du manque de sécurité liée à l'utilisation de ECB pour le chiffrement d'une image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Il est donc clair qu’avec ce mode d’opération, le contenu de l’image n’est pas devenu
totalement illisible. Il y a un manque d’imprédicitiblité lié à la conception même de ce
mode de fonctionnement. C’est aussi pourquoi ce mode ne devrait &lt;strong&gt;jamais&lt;/strong&gt; être utilisé
à des fin cryptographiques.&lt;/p&gt;

&lt;p&gt;Pour éviter cela, il faut utiliser CBC (Cipher Block Chaining) qui utilise le bloc précédent 
pour chiffrer le suivant, ce qui rend le résultat beaucoup plus aléatoire et imprédictible.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Bien qu’il soit aisé d’utiliser le chiffrement aujourd’hui, en tant que développeur,
il est aussi très facile de faire des erreurs lorsqu’on utilise AES, ce qui rend le
procédé insécure, voire même parfois, inutile.&lt;/p&gt;

&lt;p&gt;La principale raison, c’est que lorsqu’on à affaire à du chiffrement, il est important de
comprendre ce qu’il se passe, et les objets que l’on utilise, et aussi connaitre les
erreurs classiques à éviter.&lt;/p&gt;

&lt;p&gt;J’espère que vos fonctionnalités de chiffrement seront sécurisées un brin plus après la lecture de cet article !&lt;/p&gt;

</description>
        <pubDate>Wed, 12 Jul 2017 23:55:00 +0200</pubDate>
        <link>https://www.thomasdurand.fr/s%C3%A9curit%C3%A9/chiffrement/2017/07/12/bonnes-pratiques-de-chiffrement-aes-avec-swift.html</link>
        <guid isPermaLink="true">https://www.thomasdurand.fr/s%C3%A9curit%C3%A9/chiffrement/2017/07/12/bonnes-pratiques-de-chiffrement-aes-avec-swift.html</guid>
        
        
        <category>Sécurité</category>
        
        <category>Chiffrement</category>
        
      </item>
    
      <item>
        <title>Avoid 5 common mistakes with AES encryption</title>
        <description>&lt;p&gt;&lt;strong&gt;Written for Swift 3 with Xcode 8.1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With libraries like &lt;a href=&quot;https://github.com/krzyzanowskim/CryptoSwift&quot;&gt;CryptoSwift&lt;/a&gt;, it’s easier and easier to
use encryption in your code. But there are also some common mistakes not to fall
into when using cryptography!&lt;/p&gt;

&lt;p&gt;The rest of this article will use CryptoSwift as an example.&lt;/p&gt;

&lt;h3 id=&quot;1-dont-hard-code-your-cryptographic-key&quot;&gt;1. Don’t hard code your cryptographic key&lt;/h3&gt;

&lt;p&gt;Anything you put in the code is, in a way, readable by anyone. It’s always possible
for an attacker to find something, even hidden in the compiled code of your application.&lt;/p&gt;

&lt;p&gt;Plus, hardcoding a key means it’s the same encryption key for everyone, witch would
make a very bad encryption system since the key is shipped with the app.&lt;/p&gt;

&lt;p&gt;One last point is randomness. It’s primordial that a key reflect entropy.
It need to be anything. The next byte of a key need to be able anything, and there
is no less entropic than an UTF8 string used as a key.&lt;/p&gt;

&lt;p&gt;Solution ?&lt;br /&gt;
You need to &lt;strong&gt;generate&lt;/strong&gt; a key every time you need one, and store it locally in a safe place.&lt;/p&gt;

&lt;p&gt;You can generate a AES256 key this way :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateRandomData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withUnsafeMutableBytes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;mutableBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UnsafeMutablePointer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UInt8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int32&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;SecRandomCopyBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kSecRandomDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutableBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errSecSuccess&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unableToGenerateData&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// The size of the key for AES256 is 256 ÷ 8 = 32&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;myAES256keyData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateRandomData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Store your key in a safe place&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;2-store-your-keys-in-the-keychain&quot;&gt;2. Store your keys in the Keychain&lt;/h3&gt;

&lt;p&gt;Let make things clear right now, there are &lt;strong&gt;no better place&lt;/strong&gt; to store sensitive
data like cryptographic keys or password than the &lt;a href=&quot;https://developer.apple.com/documentation/security/keychain_services&quot;&gt;Keychain&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s designed by Apple to be able to store securely password, certificates and keys.
It’s also maintained by regular updates of Apple software, and finally, it uses hardware
module like the &lt;a href=&quot;https://www.quora.com/What-is-Apple’s-new-Secure-Enclave-and-why-is-it-important&quot;&gt;Secure enclave&lt;/a&gt; to assure a high level of security.&lt;/p&gt;

&lt;p&gt;TL;DR: Use the Keychain, it the most secure alternative you’ve got!&lt;/p&gt;

&lt;p&gt;You can store and access the keychain very simply on your own when you use a wrapper like &lt;a href=&quot;https://github.com/evgenyneu/keychain-swift&quot;&gt;Keychain-Swift&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;KeychainSwift&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keychain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;KeychainSwift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Store the previously created key&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;keychain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;my key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;withAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessibleWhenUnlockedThisDeviceOnly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Receive from keychain our key&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keychain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;3-set-a-correct-keychain-item-access&quot;&gt;3. Set a correct Keychain Item Access&lt;/h3&gt;

&lt;p&gt;You may have not noticed yet, but I used an access parameter to the keychain setter in point 2.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;accessibleWhenUnlockedThisDeviceOnly&lt;/code&gt; (&lt;a href=&quot;https://developer.apple.com/documentation/security/ksecattraccessiblewhenunlockedthisdeviceonly&quot;&gt;ref&lt;/a&gt;) is a bare minimum, that I use in my below example.&lt;br /&gt;
Use &lt;code class=&quot;highlighter-rouge&quot;&gt;accessibleWhenPasscodeSetThisDeviceOnly&lt;/code&gt; (&lt;a href=&quot;https://developer.apple.com/documentation/security/ksecattraccessiblewhenpasscodesetthisdeviceonly&quot;&gt;ref&lt;/a&gt;) when available.&lt;/p&gt;

&lt;p&gt;That is needed to provide a correct level of security for your stored key.
It make sure the device is unlocked, prevent backups and keychain sharing between
devices, and it can also make sure the device is secured by an unlock code.&lt;/p&gt;

&lt;h3 id=&quot;4-use-an-initialization-vector&quot;&gt;4. Use an Initialization Vector&lt;/h3&gt;

&lt;p&gt;Encrypting data is a good practice to prevent anyone to read sensitive data.&lt;/p&gt;

&lt;p&gt;But what if analytics allow an attacker to read your data without the key, just
by looking at the encrypted data?&lt;/p&gt;

&lt;p&gt;That’s what make Initialization Vector so important!&lt;/p&gt;

&lt;p&gt;Let say you need to encrypt a boolean, because you don’t wan’t anyone to figure out
who has opt-in and who haven’t.&lt;/p&gt;

&lt;p&gt;Let check the storage table after encryption:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;value&lt;/th&gt;
      &lt;th&gt;no IV (or shared IV)&lt;/th&gt;
      &lt;th&gt;randomized IV&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HspSmVFeseu7kpt5ZJE13A==&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;6sM2RzgShVcu1OPM8sH0mw==&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HspSmVFeseu7kpt5ZJE13A==&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ylJjMWFq4MoqKvpn5WSYOQ==&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sdkaq/5TFZKjFjx35Cl0rw==&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JZHeEoBfgQgk8/8eOQlQxQ==&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sdkaq/5TFZKjFjx35Cl0rw==&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;byfgDi+CD7pAo2NXYk8tVw==&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HspSmVFeseu7kpt5ZJE13A==&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;XxWfqQXe3EwNuJ3AzvgOig==&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Any clue of what’s wrong ?
Well, every same value, encrypted with the same key and iv result in the same cipher result.&lt;/p&gt;

&lt;p&gt;And that’s bad for your data, because an attacker that would eventually see the data
(and trust me, he will on an iOS device except if it’s in the Keychain), can perform
some analytics process to deduct the decrypted data.&lt;/p&gt;

&lt;p&gt;To prevent that, it’s important to generate a random IV for every encryption you
may perform.&lt;/p&gt;

&lt;p&gt;Of course this IV is needed to decrypt the data, along with the key.
A good place to store the IV is alongside the data, yes, in the table, just like you would
do with a &lt;a href=&quot;https://en.wikipedia.org/wiki/Salt_(cryptography)&quot;&gt;salt for a password hash&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// We generate a one time use IV:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;iv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;randomIV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blockSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// We encrypt the data:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;crypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// We then store the crypted data and the iv&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myStorage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;securedData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crypted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;5-do-not-use-ecb-block-mode&quot;&gt;5. Do not use ECB block mode&lt;/h3&gt;

&lt;p&gt;The block mode you set in the AES algorithm correspond to the method used by the
algorithm to perform the encryption.&lt;/p&gt;

&lt;p&gt;The choice of a good block mode is primordial to make the encryption useful and
secure.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Some encryptions available&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;encryptedWithCBC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blockMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CBC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PKCS7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;encryptedWithCTR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blockMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PKCS7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// And the one you should never use...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;encryptedWithECB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blockMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ECB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PKCS7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But why is ECB a very poor choice?&lt;/p&gt;

&lt;p&gt;ECB stand for Electronic Code Book, that encrypt every block of your input separately.
The treat is that this method will encrypt the same way two same blocks, and just
like the lack of Initialization Vector, makes the encryption predictable.&lt;/p&gt;

&lt;p&gt;It can also lead to replay attacks and information leaks.&lt;/p&gt;

&lt;p&gt;If you want to be confident about the ECB lack of security, check this example
of encryption using an image, from &lt;a href=&quot;https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation&quot;&gt;Wikipedia&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ios/crypto-practices/ECB-en.png&quot; alt=&quot;Illustration of ECB lack of security with a picture encryption&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wow, with ECB block mode, we cannot say that the content of the picture became
unpredictable and unreadable. That’s why it should &lt;strong&gt;never&lt;/strong&gt; be used as a cryptographic
block mode.&lt;/p&gt;

&lt;p&gt;To prevent that, use CBC (Cipher Block Chaining) that make the next block encryption
dependent from the previous one, and make the result unpredictable and randomized.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Although it’s very easy to use encryption today as a developer, it’s also very easy
to make a lot of mistakes when using AES, making the whole process unsecure and,
sometime, useless.&lt;/p&gt;

&lt;p&gt;The main reason is that when dealing with encryption, it’s important to know what you do,
what you’re dealing with, and also the classic errors to avoid.&lt;/p&gt;

&lt;p&gt;I hope that your app will become a little bit more secure with what you just read!&lt;/p&gt;

</description>
        <pubDate>Wed, 12 Jul 2017 21:30:00 +0200</pubDate>
        <link>https://www.thomasdurand.fr/security/encryption/2017/07/12/aes-encryption-good-practice-with-swift.html</link>
        <guid isPermaLink="true">https://www.thomasdurand.fr/security/encryption/2017/07/12/aes-encryption-good-practice-with-swift.html</guid>
        
        
        <category>Security</category>
        
        <category>Encryption</category>
        
      </item>
    
      <item>
        <title>iOS disclosure indicators implémentés correctement</title>
        <description>&lt;p&gt;&lt;strong&gt;Mis à jour pour Swift 3 avec Xcode 8.1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Les &lt;em&gt;disclosure indicators&lt;/em&gt; sont très communs dans les applications iOS, ils permettent
à l’utilisateur de savoir que si ils choisissent une cellule, ils vont accéder à
une nouvelle vue.
Vous pouvez lire la &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/TableView_iPhone/TableViewStyles/TableViewCharacteristics.html&quot;&gt;documentation Apple&lt;/a&gt; à ce sujet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ios/disclosure-indicator/cell-with-disclosure.png&quot; alt=&quot;a cell with disclosure indicator&quot; /&gt;
Une cellule avec un &lt;em&gt;disclosure indicator&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ajouter un &lt;em&gt;disclosure indicator&lt;/em&gt; pourrait sembler très simple, pourtant quand on
souhaite réaliser une application universelle supportant iPad et iPhone, les choses
deviennent un brin plus complexe. Mais nous allons voir comment implémenter cela
de façon à faire les choses correctement !&lt;/p&gt;

&lt;h3 id=&quot;commencement-du-projet&quot;&gt;Commencement du projet&lt;/h3&gt;

&lt;p&gt;Pour débuter le projet, vous pouvez soit choisir le template Xcode &lt;em&gt;Master - Details&lt;/em&gt;,
soit télécharger/cloner ce &lt;a href=&quot;https://github.com/Dean151/disclosure-indicators-done-right/tree/start&quot;&gt;repo Github&lt;/a&gt; à la branche &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Si vous compilez et lancez l’application pour un iPhone, vous verrez qu’Apple n’a
pas inclus de &lt;em&gt;disclosure indicators&lt;/em&gt; dans son template.
Pourtant, la sélection d’une cellule nous amène bien à une vue différente. Nous
sommes loin des recommandations des &lt;a href=&quot;https://developer.apple.com/ios/human-interface-guidelines/ui-views/tables/&quot;&gt;human interface guidelines&lt;/a&gt;.
Peut-être est-ce là le signe que l’implémentation n’est pas si simple ? :)&lt;/p&gt;

&lt;h3 id=&quot;ajoutons-les-disclosure-indicators&quot;&gt;Ajoutons les &lt;em&gt;disclosure indicators&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Dans la méthode &lt;code class=&quot;highlighter-rouge&quot;&gt;tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath)&lt;/code&gt;,
ajoutez simplement juste avant de retourner la cellule :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellForRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessoryType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disclosureIndicator&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Désormais, lorsque vous compilez et lancez pour iPhone, toutes les cellules ont
un &lt;em&gt;disclosure indicator&lt;/em&gt;. Simple comme bonjour !&lt;/p&gt;

&lt;p&gt;Maintenant, corsons un peu les choses. Nous voulons faire une application universelle,
et ce template utilise un &lt;code class=&quot;highlighter-rouge&quot;&gt;UISplitViewController&lt;/code&gt; dans ce but.&lt;/p&gt;

&lt;h3 id=&quot;adaptations-pour-la-présentation-en-split-view&quot;&gt;Adaptations pour la présentation en split view&lt;/h3&gt;

&lt;p&gt;Tout d’abord, marquons notre app comme &lt;em&gt;universelle&lt;/em&gt;, car pour l’instant, il s’agit
simplement d’une application iPhone qui se lancera en mode “iPhone” sur iPad.&lt;/p&gt;

&lt;p&gt;Dans les paramètres du projet (l’élément le plus haut dans la liste des fichiers),
changeons la section &lt;em&gt;device&lt;/em&gt; à &lt;code class=&quot;highlighter-rouge&quot;&gt;Universal&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ios/disclosure-indicator/universal.png&quot; alt=&quot;La liste de devices dans les réglages du projet&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Compilez et lancez l’application pour iPad. Vous verrez que toutes les cellules
disposent d’un &lt;em&gt;disclosure indicator&lt;/em&gt;, ce qui n’est pas ce que l’utilisateur attendrait
d’une application iPad dans une présentation split-view.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ios/disclosure-indicator/comparatif.png&quot; alt=&quot;Comparatif entre une split view correcte et la notre avec des disclosure indicators&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pour faire notre coup de maître, il faut déceler lorsque le contrôleur est actuellement
présenté dans une split-view, et si c’est le cas, si il y a bien deux contrôleurs visibles
en même temps.&lt;/p&gt;

&lt;p&gt;Pour ce faire, je propose cette variable dynamique dans &lt;code class=&quot;highlighter-rouge&quot;&gt;MasterViewController&lt;/code&gt; :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;/// Retourne false si il n'y a pas de split view ou si elle est collapsed comme sur iPhone&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isInSplitViewPresentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;splitViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isCollapsed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Si il n’y a pas de split view controller, l’opérateur &lt;code class=&quot;highlighter-rouge&quot;&gt;??&lt;/code&gt; fera que les parenthèses valent &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;.
Et &lt;code class=&quot;highlighter-rouge&quot;&gt;isInSplitViewPresentation&lt;/code&gt; vaut le booléen inverse donc &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Lorsqu’il y a un split view controller, ce qui sera toujours le cas dans notre exemple,
cette ligne va regarder la valeur de &lt;code class=&quot;highlighter-rouge&quot;&gt;isCollapsed&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;isCollapsed&lt;/code&gt; sera &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; lorsque la split view présente un unique contrôleur,
ce qui est le cas sur iPhone (sauf l’iPhone 6 plus en paysage, mais on y reviendra).&lt;/p&gt;

&lt;p&gt;Maintenant, prenons avantage de ce code,
dans la méthode &lt;code class=&quot;highlighter-rouge&quot;&gt;tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath)&lt;/code&gt;
Remplacez l’ancien code que nous utilisions pour ajouter un &lt;em&gt;disclosure indicator&lt;/em&gt; par :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellForRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessoryType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isInSplitViewPresentation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;disclosureIndicator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Compilez et lancez l’application sur iPhone, puis iPad.
Tout semble se passer comme prévu … Enfin &lt;em&gt;presque&lt;/em&gt; comme prévu !&lt;/p&gt;

&lt;h3 id=&quot;lexception-de-liphone-6s-plus&quot;&gt;L’exception de l’iPhone 6(s) plus&lt;/h3&gt;

&lt;p&gt;L’iPhone 6 plus est un (très) gros appareil et c’est le seul iPhone qui supporte
l’affichage de split-view en présentant deux contrôleurs.&lt;/p&gt;

&lt;p&gt;Faisons un essai. Compilez et lancez l’application pour un iPhone 6 plus, et créez quelques cellules
avec le bouton +.
Comme nous sommes en mode portrait, vous devriez avoir des &lt;em&gt;disclosure indicators&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Passez l’appareil en mode paysage avec &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd + -&amp;gt;&lt;/code&gt; ou &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd + &amp;lt;-&lt;/code&gt;.
La split-view affiche désormais les deux contrôleurs, mais les cellules ont toujours
leurs &lt;em&gt;disclosure indicators&lt;/em&gt;.
Si vous créez plus de cellules, ou si vous défilez, les cellules qui (ré)apparaissent
à l’écran n’en disposent pas.&lt;/p&gt;

&lt;p&gt;Enfin, si vous retournez en mode portrait, les cellules qui avaient des &lt;em&gt;indicators&lt;/em&gt; en ont toujours,
et celles qui n’en avaient pas n’en ont toujours pas alors qu’elle devraient.&lt;/p&gt;

&lt;p&gt;Le code que nous utilisons jusqu’ici fonction correctement. Cependant, lorsque la
split-view change d’état, nous avons la responsabilité de mettre à jour les cellules
pour refléter ces modifications.&lt;/p&gt;

&lt;p&gt;Tout d’abord, modifions un peu le code qui ajoute les &lt;em&gt;disclosure indicators&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Créons une extension pour les cellules qui s’occupe de cela :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setDisclosureIndicator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;accessoryType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visible&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;disclosureIndicator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Et dans &lt;code class=&quot;highlighter-rouge&quot;&gt;tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath)&lt;/code&gt;
remplacez&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessoryType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isInSplitViewPresentation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;disclosureIndicator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;par&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setDisclosureIndicator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isInSplitViewPresentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Voilà qui ressemble un peu plus à quelque chose.&lt;/p&gt;

&lt;p&gt;Maintenant, ajoutons à &lt;code class=&quot;highlighter-rouge&quot;&gt;MasterViewController&lt;/code&gt; ce code qui s’occupe de gérer les
changements de taille de notre vue.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;/// Sera appelé à chaque changement de taille&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewWillTransition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;coordinator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewControllerTransitionCoordinator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// On utilise le coordinator pour suivre la transition&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;coordinator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;alongsideTransition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Lorsque la transition s'achève,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// On itère sur les cellules visibles&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visibleCells&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Et on rafraîchi les disclosure indicator de ces cellules&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setDisclosureIndicator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isInSplitViewPresentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewWillTransition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coordinator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ce morceau de code est intéressant, car avant iOS8, nous avions accès aux méthodes
&lt;code class=&quot;highlighter-rouge&quot;&gt;viewWillRotate&lt;/code&gt; et &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidRotate&lt;/code&gt;. Mais celles-ci ont été dépréciées et remplacées
par &lt;code class=&quot;highlighter-rouge&quot;&gt;viewWillTransition&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Le principal problème est que nous n’avons pas de méthode &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidTransition&lt;/code&gt;
qui aurait été appelée à la fin. Par contre, nous avons un &lt;code class=&quot;highlighter-rouge&quot;&gt;TransitionCoordinator&lt;/code&gt;
en paramètre.&lt;/p&gt;

&lt;p&gt;L’idée est d’utiliser ce coordinateur pour appeler une méthode à la fin de la transition.&lt;/p&gt;

&lt;p&gt;Pour ce faire, on ajoute une animation qui doit se faire en même temps que la transition,
mais sans passer aucune animation. On renseigne juste le code à appeler à la fin de la transition.
Dans celui-ci, nous rafraîchissons les &lt;em&gt;disclosure indicators&lt;/em&gt; de nos cellules visibles.
Comme cela est fait à la fin, nous sommes certains que notre code va ajouter ou retirer
les indicateurs si nécessaire.&lt;/p&gt;

&lt;p&gt;Compilez et lancez l’application sur iPhone 6 plus, et quelque soit la rotation,
les &lt;em&gt;disclosure indicators&lt;/em&gt; se rafraîchissent juste comme il faut.&lt;/p&gt;

&lt;h3 id=&quot;bonus--le-mode-split-view-dios9-sur-ipad&quot;&gt;Bonus : le mode Split View d’iOS9 sur iPad&lt;/h3&gt;

&lt;p&gt;Depuis iOS9, certains iPad peuvent afficher jusqu’à deux applications en simultané.&lt;/p&gt;

&lt;p&gt;Le truc, c’est que sur iPad air 2 et iPad mini 4, lorsque deux applications sont
affichées simultanément à 50/50, elles sont affichées en mode iPhone, et la split-view
sera donc &lt;code class=&quot;highlighter-rouge&quot;&gt;collapsed&lt;/code&gt;. On s’attend donc à voir apparaître les &lt;em&gt;disclosure indicators&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;La bonne nouvelle, c’est que notre code précédent fonctionne correctement avec ce cas
de figure. Sans rien changer à notre code, nous pouvons donc rendre notre application
totalement compatible avec le mode Split View.&lt;/p&gt;

&lt;p&gt;Pour essayer, retournez dans les réglages du projet, comme nous l’avons fait quelques points
auparavant, et cochez la rotation supportée &lt;code class=&quot;highlighter-rouge&quot;&gt;upside down&lt;/code&gt;.
En effet, pour fonctionner, le mode split view nécessite que les 4 orientations
soient autorisée pour l’application. Ne me demandez pas pourquoi, je n’en ai aucune idée.&lt;/p&gt;

&lt;p&gt;Compilez et lancez pour iPad air 2, ou pour iPad mini 4 (les deux iPad non-pro qui supportent
à ce jour le mode Split View) et déclenchez le mode split view en glissant votre doigt depuis
la droite de l’écran.&lt;/p&gt;

&lt;p&gt;Quand l’application passe en mode iPhone, les &lt;em&gt;disclosure indicators&lt;/em&gt; apparaissent
comme on pouvait s’y attendre.&lt;/p&gt;

&lt;h3 id=&quot;intégrons-cela-à-un-protocole&quot;&gt;Intégrons cela à un protocole&lt;/h3&gt;

&lt;p&gt;Notre solution n’est pas encore parfaite : elle suppose que toutes les cellules
de notre table view sont “disclosable”, ce qui ne sera pas le cas de toutes les
table views.&lt;/p&gt;

&lt;p&gt;Ensuite, notre approche utilise une extension globale sur toutes les cellules.
On est très loin d’une approche locale qui permet d’assurer une simplification du
code et donc de faciliter son maintien.&lt;/p&gt;

&lt;p&gt;Retirons donc totalmenet notre extension d’&lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewCell&lt;/code&gt; et créons notre protocole :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;/// Represente une cellule qui peut potentiellement discloser&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DisclosableCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;canDisclose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setDisclosureIndicator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DisclosableCell&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setDisclosureIndicator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;accessoryType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canDisclose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visible&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;disclosureIndicator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Bien sûr, cette approche va nécessiter une classe fille de &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewCell&lt;/code&gt;
pour pouvoir fonctionner dans notre exemple de tout à l’heure :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DisclosableCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;canDisclose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Toutes nos cellules dans l'exemple peuvent discloser&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Soyez sûr de modifier la classe de la cellule prototype dans le StoryBoard&lt;/strong&gt; :
Sélectionnez la cellule prototype, et dans l’&lt;em&gt;Identity Inspector&lt;/em&gt;, paramétrez la
classe de la cellule comme étant &lt;code class=&quot;highlighter-rouge&quot;&gt;MyCell&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Enfin, remplacez l’implémentation de &lt;code class=&quot;highlighter-rouge&quot;&gt;viewWillTransition&lt;/code&gt; avec:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;/// Sera appelé à chaque changement de taille&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewWillTransition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;coordinator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewControllerTransitionCoordinator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// On utilise le coordinator pour suivre la transition&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;coordinator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;alongsideTransition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Lorsque la transition s'achève,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// On itère sur les cellules visibles&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visibleCells&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DisclosableCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Et on rafraîchi les disclosure indicator de ces cellules&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setDisclosureIndicator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isInSplitViewPresentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewWillTransition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coordinator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Et dans la méthode &lt;code class=&quot;highlighter-rouge&quot;&gt;tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath)&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellForRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DisclosableCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setDisclosureIndicator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isInSplitViewPresentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Et c’est tout !&lt;/strong&gt;
Vous disposez d’une implémentation complète et réutilisable pour nos cellules
qui sont &lt;em&gt;disclosables&lt;/em&gt;. C’est maintenant un protocol que différentes classes filles
de &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewCell&lt;/code&gt; peuvent conformer.
Le bon point, c’est donc qu’une seule instance de &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewController&lt;/code&gt; peut gérer
différentes cellules, avec certaines qui seraient disclosables, d’autre pas, le
tout dans une application universelle ; avec un comportement &lt;strong&gt;correct&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Vous pouvez cloner le repo contenant l’implémentation complète du protocol sur &lt;a href=&quot;https://github.com/Dean151/disclosure-indicators-done-right&quot;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Si vous avez des idées d’amélioration pour ce code, n’hésitez pas à ouvrir une issue
sur github afin que l’on puisse en discuter ! :)&lt;/p&gt;

</description>
        <pubDate>Fri, 12 Aug 2016 21:18:00 +0200</pubDate>
        <link>https://www.thomasdurand.fr/swift3/ios/2016/08/12/ios-disclosure-indicator-implemente-correctement.html</link>
        <guid isPermaLink="true">https://www.thomasdurand.fr/swift3/ios/2016/08/12/ios-disclosure-indicator-implemente-correctement.html</guid>
        
        
        <category>Swift3</category>
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>iOS disclosure indicators done right</title>
        <description>&lt;p&gt;&lt;strong&gt;Updated for Swift 3 with Xcode 8.1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Disclosure indicators are very common in an iOS application, and they allow the
user to know that if they select a cell, they will be pushed somewhere else.
You can also read &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/TableView_iPhone/TableViewStyles/TableViewCharacteristics.html&quot;&gt;Apple documentation&lt;/a&gt; about them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ios/disclosure-indicator/cell-with-disclosure.png&quot; alt=&quot;a cell with disclosure indicator&quot; /&gt;
A cell with disclosure indicator&lt;/p&gt;

&lt;p&gt;Adding a disclosure indicator may seem easy at first, but when you want to make
a universal app supporting iPhone and iPad, things become trickier, and we’ll
see how to make it right !&lt;/p&gt;

&lt;h3 id=&quot;beginning-the-project&quot;&gt;Beginning the project&lt;/h3&gt;

&lt;p&gt;To begin the project, you can either create a &lt;em&gt;Master - Details&lt;/em&gt; template
application with Xcode, or download/clone this &lt;a href=&quot;https://github.com/Dean151/disclosure-indicators-done-right/tree/start&quot;&gt;Github repo&lt;/a&gt; at the branch &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you build and run for iPhone, and use the app a little, you’ll see that apple
hasn’t added a disclosure indicator to their project.
But if you select a cell, a new view controller will be pushed. Not quite like
described in the &lt;a href=&quot;https://developer.apple.com/ios/human-interface-guidelines/ui-views/tables/&quot;&gt;human interface guidelines&lt;/a&gt;.
Maybe it’s the sign that it’s not that easy to do ? :)&lt;/p&gt;

&lt;h3 id=&quot;adding-a-disclosure-indicator&quot;&gt;Adding a disclosure indicator&lt;/h3&gt;

&lt;p&gt;In the function &lt;code class=&quot;highlighter-rouge&quot;&gt;tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath)&lt;/code&gt;,
simply add right before returning the cell :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellForRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessoryType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disclosureIndicator&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, build and run for iPhone. You have disclosure indicators for your cells !
Easy as pie !&lt;/p&gt;

&lt;p&gt;Now, let complicate things. We want to make a universal app, and this template
use a &lt;code class=&quot;highlighter-rouge&quot;&gt;UISplitViewController&lt;/code&gt; for that purpose.&lt;/p&gt;

&lt;h3 id=&quot;adapting-disclosure-indicators-for-split-view-presentation&quot;&gt;Adapting disclosure indicators for split view presentation&lt;/h3&gt;

&lt;p&gt;Let register the app as Universal, because right now it’s just an iPhone app.&lt;/p&gt;

&lt;p&gt;In the project settings (the most top element in the file list), change devices
to become &lt;code class=&quot;highlighter-rouge&quot;&gt;Universal&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ios/disclosure-indicator/universal.png&quot; alt=&quot;the selector of devices in the target settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Build and run the app for iPad. You should see that every cell have a disclosure
indicator, which is not what we expect in a Master-Detail split-view app on iPad.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ios/disclosure-indicator/comparative.png&quot; alt=&quot;comparative between a correct split view and our split view with disclosure indicators&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To make the magic happen, we need to detect when the view controller is currently
presenting in a split view controller, and if it is, if we have two view controllers visible.&lt;/p&gt;

&lt;p&gt;To do so, I would use this piece of code in the &lt;code class=&quot;highlighter-rouge&quot;&gt;MasterViewController&lt;/code&gt; :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;/// Will return false if no split view or if split view is collapsed like on iPhone&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isInSplitViewPresentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;splitViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isCollapsed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If there is no split view controller, the &lt;code class=&quot;highlighter-rouge&quot;&gt;??&lt;/code&gt; operator will make the parenthesis return &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;.
And &lt;code class=&quot;highlighter-rouge&quot;&gt;isInSplitViewPresentation&lt;/code&gt; equals the inverted boolean, so it will be &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When there is a split view controller, which is always the case in our example, this piece of code
will look at the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;isCollapsed&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;isCollapsed&lt;/code&gt; will be true when the split view present only one view controller at a time, which is
the case on iPhone (except iPhone 6 plus in landscape, but we’ll come to that later).&lt;/p&gt;

&lt;p&gt;Then, with this piece of code, replace in &lt;code class=&quot;highlighter-rouge&quot;&gt;tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath)&lt;/code&gt;
the code we wrote before for the accessoryType :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellForRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessoryType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isInSplitViewPresentation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;disclosureIndicator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now build and run for iPhone, or for iPad, and it works as expected … well, &lt;em&gt;almost&lt;/em&gt; as expected !&lt;/p&gt;

&lt;h3 id=&quot;the-iphone-6s-plus-exception&quot;&gt;The iPhone 6(s) plus exception&lt;/h3&gt;

&lt;p&gt;The iPhone 6 plus is a (very) big device and is the only iPhone that is able to show
split views in non-collapsed mode.&lt;/p&gt;

&lt;p&gt;Let give it a try. Build and run for iPhone 6 plus model, and create a few cells with the + button.
You should have disclosure indicators in the cells.&lt;/p&gt;

&lt;p&gt;Rotate the device with &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd + -&amp;gt;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd + &amp;lt;-&lt;/code&gt;.
The split view now shows the two view controllers, but the cells still have disclosure indicators.
If you create more cell, or if you scroll, the cells that appear on screen won’t have them.&lt;/p&gt;

&lt;p&gt;If you return the device in portrait ; the cells that had indicators still have, but the others don’t
and they should.&lt;/p&gt;

&lt;p&gt;The code we use works okay, it’s just that when the device change it’s state, we need to update
the cells to reflect the changes.&lt;/p&gt;

&lt;p&gt;First, let move the logic of the disclosure adding.&lt;/p&gt;

&lt;p&gt;Let create an extension for the cell that handle the cell accessory type :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setDisclosureIndicator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;accessoryType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visible&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;disclosureIndicator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And in the &lt;code class=&quot;highlighter-rouge&quot;&gt;tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;replace&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessoryType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isInSplitViewPresentation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;disclosureIndicator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setDisclosureIndicator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isInSplitViewPresentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Looks a little bit better.&lt;/p&gt;

&lt;p&gt;Now, add in the &lt;code class=&quot;highlighter-rouge&quot;&gt;MasterViewController&lt;/code&gt; this code that handle the change portrait/landscape :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;/// Will be called each time the size of the view controller changes&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewWillTransition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;coordinator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewControllerTransitionCoordinator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// We use the coordinator to keep track of the transition&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;coordinator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;alongsideTransition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// In the completion of the transition,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// We loop on each cell&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visibleCells&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// And we refresh the disclosure indicator of those cells&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setDisclosureIndicator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isInSplitViewPresentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewWillTransition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coordinator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This code is interesting because prior to iOS 8, we had the &lt;code class=&quot;highlighter-rouge&quot;&gt;viewWillRotate&lt;/code&gt; and the
&lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidRotate&lt;/code&gt; functions. But those two have been depreciated and replaced by
&lt;code class=&quot;highlighter-rouge&quot;&gt;viewWillTransition&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The problem is that we do not have a &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidTransition&lt;/code&gt; method
that would be called at the end. But we do have a transition coordinator in parameter.&lt;/p&gt;

&lt;p&gt;The idea is to use this coordinator in order to call method at the end of the animations.&lt;/p&gt;

&lt;p&gt;To do so, we animate alongside transition, but we do not give any animation, just a completion handler.
So the refresh of the cells will be made at the end of the transition, so we are sure our code will
remove, or add disclosure indicators only if needed.&lt;/p&gt;

&lt;p&gt;Build and run the app for iPhone 6 plus and rotate as you like to see the disclosure indicators doing
things just right.&lt;/p&gt;

&lt;h3 id=&quot;bonus-ios9-split-view-mode-on-ipad&quot;&gt;Bonus: iOS9 Split view mode on iPad&lt;/h3&gt;

&lt;p&gt;Since iOS9, some iPad models can became in Split view mode.
It allow two apps to be displayed at the same time in the screen.&lt;/p&gt;

&lt;p&gt;The thing about that is on iPad air 2 and iPad mini 4, when two apps are displayed
side by side at 50/50, they are displayed in iPhone mode and the split view will
be collapsed.&lt;/p&gt;

&lt;p&gt;A good thing about our previous code is that is also works nice with this transition.
It means that without any code side change, we can make our app works with Split View mode.&lt;/p&gt;

&lt;p&gt;To try this out, go back in the target settings, like we did before and check the &lt;code class=&quot;highlighter-rouge&quot;&gt;upside down&lt;/code&gt; rotation.
Indeed, to work, split view need all 4 orientations supported. Don’t ask me why, I don’t have a clue.&lt;/p&gt;

&lt;p&gt;Build and run for iPad air 2 or iPad mini 4 (the two non-pro devices that support split view at this time)
and trigger the split view with a pan gesture from the right border of the screen.&lt;/p&gt;

&lt;p&gt;When the app become collapsed, the disclosure indicators appears as we could expect them to.&lt;/p&gt;

&lt;h3 id=&quot;wrapping-this-as-a-protocol&quot;&gt;Wrapping this as a Protocol&lt;/h3&gt;

&lt;p&gt;Our solution is not perfect yet : it assume that every cell is disclosable in our
table view, which will not be always the case in all tableviews.&lt;/p&gt;

&lt;p&gt;Then, the approach of a global extension is not a very “local” approach, and keeping
your code local is the best way to make it simpler to maintain.&lt;/p&gt;

&lt;p&gt;Let remove completely our extension of &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewCell&lt;/code&gt; and create our protocol :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;/// Represent a cell that is disclosable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DisclosableCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;canDisclose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setDisclosureIndicator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DisclosableCell&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setDisclosureIndicator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;accessoryType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canDisclose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visible&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;disclosureIndicator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, we need a subclass of &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewCell&lt;/code&gt; to make it work in our example from below :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DisclosableCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;canDisclose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// All of our cells disclose&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Make sure to change the class of the cell in the storyboard&lt;/strong&gt;:
Select the prototype cell, and in the &lt;em&gt;Identity Inspector&lt;/em&gt;, set the class of the cell
as &lt;code class=&quot;highlighter-rouge&quot;&gt;MyCell&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, replace the viewWillTransition implementation with:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;/// Will be called each time the size of the view controller changes&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewWillTransition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;coordinator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewControllerTransitionCoordinator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// We use the coordinator to keep track of the transition&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;coordinator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;alongsideTransition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// In the completion of the transition,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// We loop on each cell&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visibleCells&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DisclosableCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// And we refresh the disclosure indicator of those cells&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setDisclosureIndicator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isInSplitViewPresentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewWillTransition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coordinator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And inside &lt;code class=&quot;highlighter-rouge&quot;&gt;tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath)&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellForRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DisclosableCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setDisclosureIndicator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isInSplitViewPresentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;And this is it!&lt;/strong&gt; You have a full and reusable implementation of our special disclosable
cells, that is now a protocol that many cells implementation can conform. The good
point with this is that a single UITableViewController that handle many different cells
with some that are disclosable, other aren’t in a universal app ; with the &lt;strong&gt;correct and
expected&lt;/strong&gt; behavior.&lt;/p&gt;

&lt;p&gt;You can clone the repo with the full implementation of this protocol on &lt;a href=&quot;https://github.com/Dean151/disclosure-indicators-done-right&quot;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any idea of improvement we can achieve on this implementation, make
sure to open an issue directly on Github, and we’ll discuss about it! :)&lt;/p&gt;

</description>
        <pubDate>Fri, 12 Aug 2016 21:18:00 +0200</pubDate>
        <link>https://www.thomasdurand.fr/swift3/ios/2016/08/12/ios-disclosure-indicator-done-right.html</link>
        <guid isPermaLink="true">https://www.thomasdurand.fr/swift3/ios/2016/08/12/ios-disclosure-indicator-done-right.html</guid>
        
        
        <category>Swift3</category>
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>iOS basics: UITableView setup with Swift 3</title>
        <description>&lt;p&gt;&lt;strong&gt;Updated for Swift 3 with Xcode 8.1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that I begin to feel very familiar with &lt;em&gt;Swift&lt;/em&gt; syntax and &lt;em&gt;iOS&lt;/em&gt; app design ; and that I am totally convinced by how easy it is to do swift code, I want to share with you how to use it to make one of the more common UI and UX of &lt;em&gt;iOS&lt;/em&gt; : a TableView presentation for &lt;em&gt;iOS&lt;/em&gt; !&lt;/p&gt;

&lt;p&gt;This is the first article about &lt;em&gt;iOS&lt;/em&gt; development on this blog and I really hope I will manage to write more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There is two methods to implement a dynamic table view : using a &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewController&lt;/code&gt;, or using a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt; that implements &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewDelegate&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewDataSource&lt;/code&gt;. I will explain this second solution in this tutorial, not because it’s the simplest, but because it allow way more customizations for the layout of the TableView if you need to.&lt;/p&gt;

&lt;h3 id=&quot;what-were-gonna-build-from-scratch&quot;&gt;What we’re gonna build from scratch&lt;/h3&gt;

&lt;p&gt;We are going to achieve today is the list of all elements from the periodic elements, ordered by atomic number.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ios/tutorial1/Screenshot.png&quot; alt=&quot;Screenshot of the result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Thankfully, we’re not going to implement all of the atoms data in the code. Instead, we are going to fetch it from a plist file from an Apple sample code :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/ios/tutorial1/Elements.plist&quot;&gt;Elements.plist&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;first-about-mvc&quot;&gt;First: about MVC&lt;/h3&gt;

&lt;p&gt;MVC for “Model View Controller” is a pattern design that allow to separate different aspects of the code in an application :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Model&lt;/strong&gt;: Represent the data you want to display. In swift, it’s recommended to make struct oriented models instead of class oriented model ; but it depends on what you’re trying to achieve&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;View&lt;/strong&gt;: Here in our tutorial, the view will be the &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt;. Views are what are presented to the user, and the user can interact with it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Controller&lt;/strong&gt;: To simplify, it’s the glue between your model, and your data. The user interact with the view, the view signal it to the controller, the controller update the data, and make the view follow those changes. When the data change, the controller is responsible to update the view accordingly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In &lt;em&gt;iOS&lt;/em&gt;, MVC is the most common pattern design, and UIKit is designed to be pro-MVC. The controller will be a subclass of &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt;.
Every instances of &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt; contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; instance. That will be our main view.
We will create a &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt; instance that will be a subview of the main &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Finally our data will be structured with a simple &lt;em&gt;Swift&lt;/em&gt; struct.&lt;/p&gt;

&lt;h3 id=&quot;starting-the-project&quot;&gt;Starting the project&lt;/h3&gt;

&lt;p&gt;Open &lt;em&gt;Xcode 8&lt;/em&gt; and create a new iOS project with the “One view” template. Name the project &lt;code class=&quot;highlighter-rouge&quot;&gt;ElementsList&lt;/code&gt;.
Make sure that CoreData, Unit Tests and UI Tests are &lt;em&gt;unchecked&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Xcode created a lot of files, that are listed on the left ; It’s the very basic of an iOS app : A storyboard to design views, a view controller that is the first controller of the app, and an AppDelegate that take care of the logic of the app life cycle.&lt;/p&gt;

&lt;p&gt;Open the StoryBoard, and you’ll see a simple iOS empty view. One of the many way to make the UI of an app is to design the views and all the relations between them directly in this file. But the only thing we will do is to add a Navigation Controller for our app, that will allow us to have the iOS top navigation bar, and eventually to push new view controllers in a later tutorial.&lt;/p&gt;

&lt;p&gt;To do so, select the view controller, and in the top menu, select &lt;code class=&quot;highlighter-rouge&quot;&gt;Editor &amp;gt; Embed in &amp;gt; Navigation Controller&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This should add a view controller with a navigation bar, and an arrow lead now to our previous view controller. You just created your first Storyboard relation, congrats !&lt;/p&gt;

&lt;p&gt;Next step is the model layer&lt;/p&gt;

&lt;h3 id=&quot;the-model-layer&quot;&gt;The model layer&lt;/h3&gt;

&lt;p&gt;A good start before implementing something is to think about how the data will be represented in our code.&lt;/p&gt;

&lt;p&gt;If you didn’t already have, open the data file &lt;a href=&quot;/assets/ios/tutorial1/Elements.plist&quot;&gt;Elements.plist&lt;/a&gt; and take a look at it.&lt;/p&gt;

&lt;p&gt;We have a structure of an array of dictionaries. Each dictionary represent an element, and contains a lot of data. A good start would be to have all the data available in our model, to make sure we fit our future needs without redesigning the model later.&lt;/p&gt;

&lt;p&gt;To create the model, create a new Swift file in the project, named &lt;code class=&quot;highlighter-rouge&quot;&gt;Element.swift&lt;/code&gt;. In this file, we will implement the model layer.&lt;/p&gt;

&lt;p&gt;Here is an example of model I came up with :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Solid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Liquid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Gas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Artificial&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;atomicNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;atomicWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// in g.mol-1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;discoveryYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;radioactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Position in the table&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;horizPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;vertPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Every data type is pretty simple in this example : Bool, Integers, Float and Strings ; but there is also an enum type. Enums are ideal when you only need to support a limited number of options. It’s the case here with an element state, that have only 4 possible values.&lt;/p&gt;

&lt;p&gt;Note that I choose to make my enumeration inherit from String, witch mean each state is a string, and that we can try to convert a string to a State.&lt;/p&gt;

&lt;p&gt;This model map all the data from &lt;a href=&quot;/assets/ios/tutorial1/Elements.plist&quot;&gt;apple plist&lt;/a&gt; and will allow us to represent one element.
But what about the elements loading ? Right now, the elements are in a plist file, so we’ll need to create something that allow us to receive an &lt;strong&gt;array of all elements&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;loading-the-data&quot;&gt;Loading the data&lt;/h3&gt;

&lt;p&gt;Great, we have a model, and we have a plist file that contains our data. But we still need to translate the data in order to take advantage of our model.&lt;/p&gt;

&lt;p&gt;I would implement it that way :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ErrorProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noPlistFile&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cannotReadFile&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;/// Load all the elements from the plist file&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadFromPlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// First we need to find the plist&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Elements&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ofType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;plist&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ErrorType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;noPlistFile&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Then we read it as an array of dict&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;contentsOfFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ErrorType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cannotReadFile&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Initialize the array&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// For each dictionary&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// We implement the element&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// And add it to the array&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Return all elements&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;/// Create an element corresponding to the given dict&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;atomicNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;atomicNumber&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;atomicWeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;atomicWeight&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;discoveryYear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;discoveryYear&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;group&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;period&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;period&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;radioactive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;radioactive&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;True&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rawValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;state&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;symbol&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;horizPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;horizPos&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;vertPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vertPos&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;atomicNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atomicNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;nv&quot;&gt;atomicWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atomicWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;nv&quot;&gt;discoveryYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;discoveryYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;nv&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;nv&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;nv&quot;&gt;radioactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radioactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;nv&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;nv&quot;&gt;horizPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;horizPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;nv&quot;&gt;vertPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That a lot of code, but it’s pretty strait forward, you just need to read it to understand it.&lt;/p&gt;

&lt;p&gt;To test it, you can add in the &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad()&lt;/code&gt; method of your &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt; :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Do any additional setup after loading the view, typically from a nib.&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loadFromPlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When we check the Xcode console while executing, we find that the data is there ! Neat !&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ios/tutorial1/ElementsInConsole.png&quot; alt=&quot;The loaded elements in the console&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; : In &lt;code class=&quot;highlighter-rouge&quot;&gt;Element.from(dict: _)&lt;/code&gt; function, there is a lot of force unwrapping &lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt; in the code. That’s because the data is implemented code side and cannot be changed easily. But in a real world application, implement it that way could cause crash when the data is not what you expected, and it will happen !&lt;/p&gt;

&lt;h3 id=&quot;creating-the-table-view&quot;&gt;Creating the table view&lt;/h3&gt;

&lt;p&gt;First, we need to create a UITableView instance, and keep reference to this instance. To do so, just add a property right below &lt;code class=&quot;highlighter-rouge&quot;&gt;var elements&lt;/code&gt; :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// We make it weak for memory consideration&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we need to create the tableview, by adding those line in &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad()&lt;/code&gt; :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As soon as you do this, the compiler should complain that &lt;em&gt;ViewController class does not conform&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewDataSource&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewDelegate&lt;/code&gt; protocols*&lt;/p&gt;

&lt;p&gt;What should be do ? Well, let’s tell the compiler we implements them !
Add at the end of the file :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Right, now the compiler’s error have changed, and say we does not implement &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewDataSource&lt;/code&gt; protocol.&lt;/p&gt;

&lt;h3 id=&quot;configuring-the-table-view&quot;&gt;Configuring the table view&lt;/h3&gt;

&lt;p&gt;If we look in the documentation, we find out that &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewDataSource&lt;/code&gt; protocol contains two methods that are required to implement :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&amp;gt; Int&lt;/code&gt; : Should return the number of rows in the given section of the tableview. In our example, we just have one section, so the implementation will be simple :&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfRowsInSection&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&amp;gt; UITableViewCell&lt;/code&gt; : Should return a cell for the given IndexPath (IndexPath is a couple containing the number of the section and the number of the row)&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellForRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Getting the right element&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Instantiate a cell&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subtitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;reuseIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ElementCell&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Adding the right informations&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detailTextLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Returning the cell&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, you should build and run, and &lt;em&gt;voilà&lt;/em&gt; your first tableview. But wait ! There is more !&lt;/p&gt;

&lt;h3 id=&quot;a-memory-problem&quot;&gt;A memory problem&lt;/h3&gt;

&lt;p&gt;If you build and run the application at the current state, it seems right. But &lt;strong&gt;it’s not !&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To understand why I’m saying that, during the debug session, use the memory footprint of your app in the Xcode debug console, and pay special attention on the memory as you scroll down and up in the app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ios/tutorial1/MemoryIssue.png&quot; alt=&quot;Graphic of the memory growing up and up, diverging&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What ? Just 33MB ? And that’s why you say something is wrong ? Yes it is wrong, because we can see that when we scroll, the memory footprint just rise, some memory is never released. Witch mean the app could (and will !) eventually experience a memory crash. (hugh !)&lt;/p&gt;

&lt;p&gt;What is going on here ?&lt;/p&gt;

&lt;p&gt;Well, remember our implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;cellForRowAt: indexPath&lt;/code&gt; implementation ? It create a new cell everytime it is called by the tableview. Is it right ? No, it’s not.&lt;/p&gt;

&lt;p&gt;What should I do ?&lt;/p&gt;

&lt;p&gt;You should &lt;strong&gt;reuse&lt;/strong&gt; the cells. And don’t freak out, it’s very easy to do !&lt;/p&gt;

&lt;h3 id=&quot;reusing-cells&quot;&gt;Reusing cells&lt;/h3&gt;

&lt;p&gt;As I said, it’s very easy to use reusable cells, and we did half the job previously : we already registered a cell for reuse ! Indeed, look at the code instantiating the cell, we have set a reuseIdentifier for the cell. So let just reuse it when we can.&lt;/p&gt;

&lt;p&gt;What will be the logic ?&lt;/p&gt;

&lt;p&gt;Well, we will try to reuse a cell, and if we cannot do so, we will create a new cell.&lt;/p&gt;

&lt;p&gt;Just replace&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Instantiate a cell&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subtitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;reuseIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ElementCell&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Trying to reuse a cell&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cellIdentifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ElementCell&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dequeueReusableCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subtitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;reuseIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, when initializing a cell, we first try to reuse a cell, using &lt;code class=&quot;highlighter-rouge&quot;&gt;dequeueReusableCell(withIdentifier: _)&lt;/code&gt;. This function will return a cell if it succeed, and nil if it fails.&lt;/p&gt;

&lt;p&gt;Take a look at the second line.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;??&lt;/code&gt; operator uses the first value if it’s not nil, and will use the second value when the first value is nil.&lt;/p&gt;

&lt;p&gt;This way, our cell will be reused if it can, and will be initialized from scratch just like we did before if it fails. We should always have a cell to handle from now on.&lt;/p&gt;

&lt;p&gt;To be more specific, the dequeueReusableCell function will fail only the first time, because we did not registered any cell for the given identifier “ElementCell”. But then, dequeuing cells will work just fine, because Apple is able to create new cells when none of them are available for dequeuing.&lt;/p&gt;

&lt;h3 id=&quot;final-touches&quot;&gt;Final touches&lt;/h3&gt;

&lt;p&gt;Ok it begins to look right now. But I can enumerate 3 problems :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;There is no title in the navigation bar&lt;/li&gt;
  &lt;li&gt;If you touch a cell, it remains gray&lt;/li&gt;
  &lt;li&gt;You told us elements would be ordered by atomic number ! (hydrogen first, helium then, etc…)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, let correct all of that, one to three lines of code per problem !&lt;/p&gt;

&lt;p&gt;1) in &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt;, at any place&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;navigationItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Periodic Elements&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The navigation item allow to customize how a ViewController will be displayed within a NavigationController. Here, we just want to set a title.&lt;/p&gt;

&lt;p&gt;2) At the bottom of the file, inside the extension implementing &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewDelegate&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didSelectRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deselectRow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewDelegate&lt;/code&gt;, we implement &lt;code class=&quot;highlighter-rouge&quot;&gt;tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)&lt;/code&gt; that is called as soon as a cell become selected. When it occurs, we ask the tableview to deselect the indexpath with an animation. Witch result a fade out of the selected cell as soon as it is selected, making the user knowing there is nothing to do by selecting cells for now in the application.&lt;/p&gt;

&lt;p&gt;3) in &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt;, right below &lt;code class=&quot;highlighter-rouge&quot;&gt;elements = try! Element.loadFromPlist()&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atomicNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atomicNumber&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will sort the array right in place.
Swift 3 arrays have two functions to sort arrays :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sort&lt;/code&gt; : Will sort the current array right in place, witch is possible only if the array is stored in a &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; (mutable). It returns nil&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sorted&lt;/code&gt; : Will return a sorted copy of the array. It’s available on any array, mutating (&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;) or not (&lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;its-a-wrap-&quot;&gt;It’s a wrap !&lt;/h3&gt;

&lt;p&gt;Now when you build the app, it as completely the behavior we expected.
If you need it, you can clone or download the project from &lt;a href=&quot;https://github.com/Dean151/ElementsList/tree/tutorial-1&quot;&gt;this branch on Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ios/tutorial1/Screenshot.png&quot; alt=&quot;Screenshot of the result&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-to-do-next-&quot;&gt;What to do next ?&lt;/h3&gt;

&lt;p&gt;I will write the next tutorials, witch should include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A detail view to consult every properties of any element&lt;/li&gt;
  &lt;li&gt;A search bar to find your element.&lt;/li&gt;
  &lt;li&gt;A landscape mode with the element disposed like in the real table&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also try to do so by yourself ; using Apple documentation and any other blog !&lt;/p&gt;

</description>
        <pubDate>Sun, 07 Aug 2016 12:46:07 +0200</pubDate>
        <link>https://www.thomasdurand.fr/swift3/ios/2016/08/07/ios-basics-tableview-setup.html</link>
        <guid isPermaLink="true">https://www.thomasdurand.fr/swift3/ios/2016/08/07/ios-basics-tableview-setup.html</guid>
        
        
        <category>Swift3</category>
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Bases iOS: configuration d'une UITableView avec Swift 3</title>
        <description>&lt;p&gt;&lt;strong&gt;Mis à jour pour Swift 3 avec Xcode 8.1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Maintenant que je me sens très familier avec la syntaxe du &lt;em&gt;Swift&lt;/em&gt; et l’architecture d’une app &lt;em&gt;iOS&lt;/em&gt; ; et que je suis totalement convaincu de la simplicité à écrire du code Swift, je veux partager avec vous comment utiliser et faire l’une des interfaces les plus communes d’&lt;em&gt;iOS&lt;/em&gt; : une présentation de données avec une TableView !&lt;/p&gt;

&lt;p&gt;C’est le premier article à propos du dévelopement &lt;em&gt;iOS&lt;/em&gt; sur ce blog, et j’espère pouvoir en écrire beaucoup plus.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; il existe deux méthodes pour implémenter une TableView dynamique : en utilisant une &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewController&lt;/code&gt;, ou bien avec une &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt; qui conforme les protocoles &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewDelegate&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewDataSource&lt;/code&gt;. J’ai choisi de vous montrer la seconde solution dans ce tutoriel, non pas parce que c’est la plus simple, mais parce que c’est la méthode qui permet le plus de personnalisation dans la mise en page de la vue, ce qui peut être utile.&lt;/p&gt;

&lt;h3 id=&quot;ce-que-lon-va-réaliser&quot;&gt;Ce que l’on va réaliser&lt;/h3&gt;

&lt;p&gt;Notre but d’aujourd’hui est la réalisation de la liste des éléments du tableau périodique, classés par numéro atomique.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ios/tutorial1/Screenshot.png&quot; alt=&quot;Image du résultat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Heureusement, nous n’allons pas implémenter les données de tous les atomes directement dans le code. À la place, nous allons les récupérer depuis un fichier .plist provenant d’un code exemple d’Apple :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/ios/tutorial1/Elements.plist&quot;&gt;Elements.plist&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;dabord--À-propos-du-mvc&quot;&gt;D’abord : À propos du MVC&lt;/h3&gt;

&lt;p&gt;MVC pour “Modèle Vue Contrôleur” est un design pattern qui sépare différents aspects du code dans une application :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;le &lt;strong&gt;Modèle&lt;/strong&gt; représente les données que l’on souhaite afficher. En swift, il est recommandé d’adopter une représentation orientée structure plutôt qu’un modèle orienté classe. Mais cela dépend de ce que l’on souhaite réaliser.&lt;/li&gt;
  &lt;li&gt;la &lt;strong&gt;Vue&lt;/strong&gt;: Ici, ce sera notre TableView. Les vues sont présentées à l’utilisateur et ce dernier peu intéragir avec elles.&lt;/li&gt;
  &lt;li&gt;le &lt;strong&gt;Contrôleur&lt;/strong&gt;: Pour simplifier, il s’agit de la colle entre le modèle, les vues et les données. L’utilisateur intéragit avec les vues, celles-ci le signalent au contrôleur, qui va modifier les données, et mettre à jour les vues pour prendre en compte les modifications. Lorsque les données changent, le contrôleur est responsable d’adapter les vues en conséquence.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pour le développement &lt;em&gt;iOS&lt;/em&gt;, MVC est le design pattern le plus commun, et UIKit est conçu pour être pro-MVC. Le contrôleur sera une classe fille de &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewControler&lt;/code&gt;.
Toutes les instances de &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt; contiennent une instance de &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt;. Ce sera notre vue principale.
Nous allons créer une instance de &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt; qui sera une sous-vue de notre &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; principale.&lt;/p&gt;

&lt;p&gt;Enfin, nos données seront structurées avec une simple structure &lt;em&gt;Swift&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;commencer-le-projet&quot;&gt;Commencer le projet&lt;/h3&gt;

&lt;p&gt;Ouvrez &lt;em&gt;Xcode 8&lt;/em&gt; et choisissez “create a new iOS project” avec le template “One view”. Nommez le projet &lt;code class=&quot;highlighter-rouge&quot;&gt;ElementsList&lt;/code&gt;.
Assurez-vous que CoreData, Unit Tests et UI Tests sont &lt;em&gt;décochés&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Xcode a créé un certain nombre de fichiers qui sont listés sur la gauche ; C’est le point de départ de toute application iOS : Un Storyboard pour construire les vues, un ViewController qui est le premier controleur de l’app, et un AppDelegate qui s’occupe de toute la logique du cycle de vie de l’application.&lt;/p&gt;

&lt;p&gt;Ouvrez le StoryBoard, et vous verrez juste une première vue vide. Une des nombreuses façons de procéder pour réaliser le UI des vues de l’applications est de réaliser celles-ci et les relations entre elles directement dans ce fichier. Cependant la seule chose que nous allons faire pour le moment dans ce fichier est d’ajouter un Navigation Controller pour notre application. Cela nous permettra de disposer de la barre de navigation en haut, et pour plus tard de pousser de nouvelles vues dans un tutoriel futur.&lt;/p&gt;

&lt;p&gt;Pour ajouter ce NavigationController, sélectionnez la vue visible, puis dans le menu : &lt;code class=&quot;highlighter-rouge&quot;&gt;Editor &amp;gt; Embed in &amp;gt; Navigation Controller&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ceci devrait ajouter un View Controller avec une barre de navigation, et une flèche qui pointe vers notre précédent view controller. Vous venez de créer votre première relation entre contrôleurs dans un StoryBoard. Bravo !&lt;/p&gt;

&lt;p&gt;Prochaine étape : le modèle.&lt;/p&gt;

&lt;h3 id=&quot;le-modèle&quot;&gt;Le modèle&lt;/h3&gt;

&lt;p&gt;Un bon départ pour une application avant d’implémenter quoique ce soit, est de réfléchir à la façon dont les données vont être représentées dans le code.&lt;/p&gt;

&lt;p&gt;Si vous ne l’avez pas déjà fait, ouvrez le fichier de données &lt;a href=&quot;/assets/ios/tutorial1/Elements.plist&quot;&gt;Elements.plist&lt;/a&gt; et jetez un coup d’œil aux données qu’il contient.&lt;/p&gt;

&lt;p&gt;Nous avons un fichier contenant un tableau de dictionnaires. Chaque dictionnaire représente un élément, et contient un certain nombre de données. C’est toujours une bonne habitude d’implémenter dans le modèle la totalité des données disponible, cela permet d’assurer une adaptabilité simple avec les futures fonctionnalités d’une application sans devoir toucher au modèle.&lt;/p&gt;

&lt;p&gt;Pour créer le modèle, créez un nouveau fichier Swift dans le projet, nommez-le &lt;code class=&quot;highlighter-rouge&quot;&gt;Element.swift&lt;/code&gt;. Dans ce fichier, nous allons implémenter la totalité du modèle.&lt;/p&gt;

&lt;p&gt;Voici un exemple du modèle que j’ai implémenté pour cette application :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Solid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Liquid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Gas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Artificial&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;atomicNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;atomicWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// en g.mol-1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;discoveryYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;radioactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Position dans la table&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;horizPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;vertPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Tous les types sont plutôt simples dans cet exemple : Booléen, Entier, Flottant et chaînes de caractères ; mais il y a aussi une énumération. Les énumérations sont idéals lorsqu’on ne nécessite qu’un nombre limité d’options. C’est le cas ici avec l’état d’un élément. Il n’y a que 4 valeurs possibles.&lt;/p&gt;

&lt;p&gt;Notez que j’ai choisi de faire une énumération de String, ce qui signifie qu’un état est en réalité une chaîne de caractères, et que l’on pourra essayer de convertir une chaîne de caractères en State et inversement.&lt;/p&gt;

&lt;p&gt;Ce modèle reprend toutes les données du &lt;a href=&quot;/assets/ios/tutorial1/Elements.plist&quot;&gt;fichier plist d’apple&lt;/a&gt; et nous permettra de représenter un élément.
Mais comment charger les éléments ? Actuellement, les éléments sont dans un fichier plist, donc nous allons devoir écrire quelque chose nous permettant de transformer ce fichier plist en un tableau contenant &lt;em&gt;tous les éléments&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;chargement-des-données&quot;&gt;Chargement des données&lt;/h3&gt;

&lt;p&gt;Bien, nous avons un modèle, et nous avons les données dans un fichier plist. Cependant nous avons encore besoin de la traduction de nos données vers ce modèle pour pouvoir en profiter.&lt;/p&gt;

&lt;p&gt;Je l’implémenterais de cette façon :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ErrorType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noPlistFile&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cannotReadFile&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;/// Charge tous les éléments depuis le plist&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadFromPlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// On cherche le plist dans le projet&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forResource&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Elements&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ofType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;plist&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ErrorType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;noPlistFile&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Ensuite, on lit ce fichier comme un tableau de dictionnaires&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;contentsOfFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ErrorType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cannotReadFile&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Initialisation de l'array&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Pour chaque dictionnaire&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// On implémente l'élément&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Et on l'ajoute à l'array&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Enfin on retourne les éléments&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;/// Créé un élément à partir du dictionnaire en paramètre&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;atomicNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;atomicNumber&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;atomicWeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;atomicWeight&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;discoveryYear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;discoveryYear&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;group&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;period&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;period&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;radioactive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;radioactive&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;True&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rawValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;state&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;symbol&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;horizPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;horizPos&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;vertPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vertPos&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;atomicNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atomicNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;nv&quot;&gt;atomicWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atomicWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;nv&quot;&gt;discoveryYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;discoveryYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;nv&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;nv&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;nv&quot;&gt;radioactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radioactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;nv&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;nv&quot;&gt;horizPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;horizPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;nv&quot;&gt;vertPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;C’est beaucoup de code, mais cela ce lit plutôt facilement, et devrait ne pas être trop difficile à comprendre.&lt;/p&gt;

&lt;p&gt;Pour l’essayer, on peut ajouter dans la méthode &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad()&lt;/code&gt; de la classe &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt; :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Contient notre array d'éléments&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Do any additional setup after loading the view, typically from a nib.&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loadFromPlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Quand on regarde la console d’Xcode pendant l’exécution, les données sont là !&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ios/tutorial1/ElementsInConsole.png&quot; alt=&quot;The loaded elements in the console&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; : Dans la méthode &lt;code class=&quot;highlighter-rouge&quot;&gt;Element.from(dict: _)&lt;/code&gt;, j’utilise beaucoup de “force unwrapping” &lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt; qui va forcer la donnée . J’ai fait ce choix parce que les données sont implémentées dans un fichier qui n’est pas censé changer souvent et qui ne peuvent pas être modifiées facilement. Mais dans une véritable application, l’implémenter de cette façon pourrait causer des crashs lorsque les données ne correspondent pas  à ce qui est attendu, et cela risque fort d’arriver !&lt;/p&gt;

&lt;h3 id=&quot;créons-la-tableview&quot;&gt;Créons la TableView&lt;/h3&gt;

&lt;p&gt;D’abord, nous devons créer une instance de tableview, et garder la référence à cette instance. Pour ce faire, il faut ajouter une propriété à la classe &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt; juste en dessous de &lt;code class=&quot;highlighter-rouge&quot;&gt;var elements&lt;/code&gt; :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// On la créée weak pour une considération de mémoire&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ensuite, on créée la tableview à la fin de la méthode &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad()&lt;/code&gt; :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aussitôt fait, le compilateur devrait se plaindre que &lt;em&gt;ViewController class does not conform UITableViewDataSource and UITableViewDelegate protocols&lt;/em&gt;, ce qui signifie qu’il faut que le contrôleur implémente les protocoles que l’on essaie d’assigner sur les deux dernières lignes.&lt;/p&gt;

&lt;p&gt;Que devons-nous faire ? Eh bien, disons au compilateur que nous les implémentons !
Ajoutez à la fin du fichier :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Bien, maintenant l’erreur du compilateur a changée, et dit que nous n’implémentons pas le protocole &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewDataSource&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;configurons-la-tableview&quot;&gt;Configurons la tableview&lt;/h3&gt;

&lt;p&gt;Si on regarde la documentation, on se rend compte que le protocole &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewDataSource&lt;/code&gt; contient deux méthodes qu’il est obligatoire d’implémenter :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&amp;gt; Int&lt;/code&gt; : Doit retourner le nombre de lignes dans la section en paramètre de la tableview. Dans notre exemple, nous avons qu’une seule section, donc l’implémentation de celle-ci sera très simple :&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfRowsInSection&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&amp;gt; UITableViewCell&lt;/code&gt; : Doit retourner la cellule correspondant à l’IndexPath en paramètre (un IndexPath est un couple contenant le nombre de la section et le nombre de la ligne)&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellForRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Récupérons le bon élément&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Créons une cellule&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subtitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;reuseIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ElementCell&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// On y ajoute les bonnes informations&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detailTextLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// On retourne la cellule&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Maintenant, on peut compiler et lancer l’app, et voilà, votre première tableview. Mais attendez ! Il y a plus !&lt;/p&gt;

&lt;h3 id=&quot;un-problème-de-mémoire&quot;&gt;Un problème de mémoire&lt;/h3&gt;

&lt;p&gt;Si vous lancez l’application en l’état, elle semble bien, mais &lt;strong&gt;Ce n’est pas le cas !&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pour comprendre pourquoi je dis cela, lorsque l’application est lancée depuis Xcode, regardez l’emprunte mémoire vive dans la console de debug d’Xcode, et faites bien attention à la quantité de mémoire que prend l’application lorsqu’on défile vers le haut ou vers le bas.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ios/tutorial1/MemoryIssue.png&quot; alt=&quot;Graphique de la mémoire, ne faisant qu'augmenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Quoi ? Juste 33Mo ? Et vous me dite que ça ne va pas ?
Oui, ça ne va pas, car on voit bien que lorsqu’on défile, la mémoire vive consommée par l’application ne fait qu’augmenter, augmenter et augmenter. Il existe de la mémoire qui n’est jamais déallouée.
Cela signifie que l’application pourrait (et va) éventuellement crasher pour cause de trop forte consommation de mémoire vive. (outch !)&lt;/p&gt;

&lt;p&gt;Que se passe-t-il ?&lt;/p&gt;

&lt;p&gt;Eh bien, rappelez-vous de notre implémentation de &lt;code class=&quot;highlighter-rouge&quot;&gt;cellForRowAt: indexPath&lt;/code&gt; ? Elle créé une nouvelle cellule à chaque fois qu’elle est appelée par la TableView. Est-ce la bonne façon de faire ? Non, définitivement non.&lt;/p&gt;

&lt;p&gt;Que faire ?&lt;/p&gt;

&lt;p&gt;On doit &lt;strong&gt;réutiliser&lt;/strong&gt; les cellules. Et ne prenez pas peur, c’est très facile à faire !&lt;/p&gt;

&lt;h3 id=&quot;réutilisons-les-cellules&quot;&gt;Réutilisons les cellules&lt;/h3&gt;

&lt;p&gt;L’idée de base de la réutilisation des cellules est de récupérer les cellules qui disparaissent lorsqu’on défile, et de les afficher à nouveau là où on en a besoin.&lt;/p&gt;

&lt;p&gt;Comme je l’ai dit précédemment, c’est très facile à faire. De plus, on a déjà fait la moitié du travail : nous avons déjà enregistré notre cellule pour être réutilisée !
En effet, regardez le code qui créé une cellule, nous avons paramétré un “reuseIdentifier” pour la cellule. Essayons donc de la réutiliser lorsqu’on le peut.&lt;/p&gt;

&lt;p&gt;Quelle va être la logique ?&lt;/p&gt;

&lt;p&gt;Eh bien, on va essayer de réutiliser une cellule, et si on ne peut pas, créons une cellule de zéro.&lt;/p&gt;

&lt;p&gt;Remplaçons simplement&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Créons une cellule&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subtitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;reuseIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ElementCell&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;avec&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Essayons de réutiliser une cellule&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cellIdentifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ElementCell&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dequeueReusableCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subtitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;reuseIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Maintenant, lorsqu’on créé une cellule, on essaie d’abord de réutiliser une cellule, en utilisant &lt;code class=&quot;highlighter-rouge&quot;&gt;dequeueReusableCell(withIdentifier: _)&lt;/code&gt;. Cette fonction va retourner une cellule en cas de succès, et nil en cas d’échec.&lt;/p&gt;

&lt;p&gt;Regardons la seconde ligne.
L’opérateur &lt;code class=&quot;highlighter-rouge&quot;&gt;??&lt;/code&gt; utilise la première valeur quand elle n’est pas &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;, et va utiliser la seconde valeur lorsque la première est &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;De cette façon, notre cellule sera réutilisée si on le peut, et sera initialisée de zéro comme on le faisait auparavant si cela ne réussit pas. Nous devrions toujours avoir une cellule après ces deux lignes.&lt;/p&gt;

&lt;p&gt;Pour être plus précis, la fonction &lt;code class=&quot;highlighter-rouge&quot;&gt;dequeueReusableCell&lt;/code&gt; va rater uniquement la première fois, car on n’a pas enregistré de cellule pour l’identifiant “ElementCell”. Par contre, par la suite, réutiliser des cellules fonctionne sans problème car la fonction d’Apple créé des cellules lorsqu’elle n’en a pas de disponible à réutiliser.&lt;/p&gt;

&lt;h3 id=&quot;touches-finales&quot;&gt;Touches finales&lt;/h3&gt;

&lt;p&gt;Ok, ça commence à ressembler à quelque chose, mais on peut trouver 3 problèmes :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Il n’y a pas de titre dans la barre de navigation&lt;/li&gt;
  &lt;li&gt;Quand on touche une cellule, elle reste sélectionnée (grise)&lt;/li&gt;
  &lt;li&gt;Tu nous avais dit que les éléments seraient classés par ordre de numéro atomique ! (Hydrogène d’abord, ensuite l’Hélium, etc.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Alors corrigeons tout ça, quelques lignes de code par problème !&lt;/p&gt;

&lt;p&gt;1) N’importe où dans &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;navigationItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Periodic Elements&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;NavigationItem nous permet de modifier comment un contrôleur est affiché au sein d’un NavigationController. Ici, nous avons juste besoin de modifier le titre.&lt;/p&gt;

&lt;p&gt;2) En bas du fichier, au sein de l’extension qui implémente &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewDelegate&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didSelectRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deselectRow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Méthode à implémenter de &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewDelegate&lt;/code&gt;, on implémente &lt;code class=&quot;highlighter-rouge&quot;&gt;tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)&lt;/code&gt; qui est appelée aussitôt qu’une cellule est sélectionnée. Quand cela arrive, on demande à la tableview de désélectionner l’indexpath avec une animation. Ce qui permet de réaliser une désélection animée pour signaler à l’utilisateur qu’il n’y a rien à faire lorsqu’on sélectionne les cellules, du moins pour l’instant.&lt;/p&gt;

&lt;p&gt;3) Dans &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt;, juste après &lt;code class=&quot;highlighter-rouge&quot;&gt;elements = try! Element.loadFromPlist()&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atomicNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atomicNumber&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Cela va classer le tableau en place.
Les tableaux dans Swift 3 disposent de deux fonctions pour se classer :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sort&lt;/code&gt; : Va classer le tableau actuel sur place, ce qui n’est possible que si le tableau est mutable, ce qui est le cas lorsque le tableau est stocké en tant que &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;. Elle retourne &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sorted&lt;/code&gt; : Va retourner une copie du tableau, classée. Cette fonction est disponible sur tous les tableaux, y compris lorsque le tableau n’est pas mutable (&lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cest-dans-la-boite-&quot;&gt;C’est dans la boite !&lt;/h3&gt;

&lt;p&gt;Maintenant, lorsque vous lancez l’application, elle a exactement le comportement attendu.
Si vous le souhaitez, vous pouvez cloner le projet depuis &lt;a href=&quot;https://github.com/Dean151/ElementsList/tree/tutorial-1&quot;&gt;cette branche sur Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ios/tutorial1/Screenshot.png&quot; alt=&quot;Image du résultat&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;que-faire-ensuite-&quot;&gt;Que faire ensuite ?&lt;/h3&gt;

&lt;p&gt;Je vais écrire des tutoriels sur la même lancée, permettant d’ajouter à cette application :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Une vue de détail pour consulter les données de tous nos éléments&lt;/li&gt;
  &lt;li&gt;Une vue doublée “split” pour adapter l’application à l’iPad&lt;/li&gt;
  &lt;li&gt;Une barre de recherche pour trouver l’élément&lt;/li&gt;
  &lt;li&gt;Un mode paysage avec les éléments disposés en table périodique&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vous pouvez aussi essayer d’implémenter tout cela de vous-même, en utilisant la documentation d’Apple et d’autres blogs !&lt;/p&gt;

</description>
        <pubDate>Sun, 07 Aug 2016 12:46:07 +0200</pubDate>
        <link>https://www.thomasdurand.fr/swift3/ios/2016/08/07/bases-ios-configuration-tableview.html</link>
        <guid isPermaLink="true">https://www.thomasdurand.fr/swift3/ios/2016/08/07/bases-ios-configuration-tableview.html</guid>
        
        
        <category>Swift3</category>
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Renouvellement du blog</title>
        <description>&lt;p&gt;Pour ceux qui auraient connu le blog avant cette version, elle a disparu à jamais.&lt;/p&gt;

&lt;h3 id=&quot;pourquoi-&quot;&gt;Pourquoi ?&lt;/h3&gt;

&lt;p&gt;Auparavant j’utilisais Dotclear, et cela ne satisfaisait pas vraiment mes besoins. Il n’y avait pas de possibilités multi-langues et était un peu trop complexe pour mes besoins.
Il y avait également le problème du système de commentaire de Dotclear, totalement pollué par les robots en tout genre.
J’ai donc décidé d’y mettre fin.&lt;/p&gt;

&lt;p&gt;Maintenant j’utilise &lt;a href=&quot;https://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;, et c’est vraiment super. Il me permet de générer mon blog dans une version statique html.&lt;/p&gt;

&lt;p&gt;Si vous êtes intéressés par Jekyll, vous pouvez consulter &lt;a href=&quot;https://www.sylvaindurand.org/journal/&quot;&gt;ce blog&lt;/a&gt; qui propose plein d’articles dédiés à Jekyll. Un incontournable !&lt;/p&gt;

&lt;h3 id=&quot;mais-où-est-le-français-&quot;&gt;Mais où est le Français ?&lt;/h3&gt;

&lt;p&gt;Tous les articles du blog étaient en français, mais j’ai décidé que le language principal de ce blog serait l’anglais.
En effet, l’anglais est de loin le language principal des articles de programmation sur le web.
Mais je pense toujours qu’une version française pour des articles de programmation iOS serait super sur internet, et c’est pourquoi je vais travailler sur une version française de tous les articles !&lt;/p&gt;

</description>
        <pubDate>Sat, 06 Aug 2016 07:55:44 +0200</pubDate>
        <link>https://www.thomasdurand.fr/blog/2016/08/06/renouvellement-du-blog.html</link>
        <guid isPermaLink="true">https://www.thomasdurand.fr/blog/2016/08/06/renouvellement-du-blog.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
